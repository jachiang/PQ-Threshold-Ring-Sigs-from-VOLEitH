#include <array>

#include "test.hpp"

extern "C" {

#define restrict __restrict__
#include "universal_hash.h"

}

#include "catch_amalgamated.hpp"

const size_t NUM_HASHERS = 4;
const size_t NUM_INPUTS = 8;

// std::array<std::array<uint8_t, 8>, NUM_HASHERS>> keys_64 = {
// };
std::array<std::array<uint8_t, 16>, NUM_HASHERS> enc_keys_128 = {{
    {0x3c, 0x7e, 0x08, 0x15, 0x7b, 0x5b, 0xad, 0x5b, 0xc8, 0x3b, 0xc0, 0x21, 0x35, 0x17, 0x11, 0x11},
    {0xb8, 0x75, 0xed, 0x42, 0xa0, 0x59, 0x54, 0x03, 0x8e, 0xb4, 0x13, 0xb8, 0xc3, 0xe5, 0x80, 0x63},
    {0x36, 0x9a, 0x5e, 0x03, 0xc1, 0x3b, 0x13, 0x0e, 0x7c, 0x7a, 0xbe, 0x4f, 0xc6, 0x3d, 0x5b, 0x3f},
    {0xd0, 0x66, 0x9c, 0xf7, 0x8c, 0x27, 0xd3, 0x57, 0x5c, 0xbe, 0x78, 0x8e, 0xb1, 0x32, 0x08, 0x1f},
}};
std::array<std::array<uint8_t, 24>, NUM_HASHERS> enc_keys_192 = {
};
std::array<std::array<uint8_t, 32>, NUM_HASHERS> enc_keys_256 = {
};

// std::array<std::array<uint8_t, 8 * NUM_INPUTS>, NUM_HASHERS> inputs_64 = {
// };
std::array<std::array<uint8_t, 16 * NUM_INPUTS>, NUM_HASHERS> enc_inputs_128 = {{
    {0xc1, 0x32, 0xc1, 0xd8, 0xa2, 0x79, 0x9c, 0x02, 0x32, 0x3a, 0xb5, 0x56, 0x8c, 0x8c, 0x17, 0x90, 0xa7, 0xe3, 0x6a, 0x51, 0x07, 0xc2, 0xea, 0xd4, 0x5d, 0x40, 0x52, 0x37, 0x0f, 0x9c, 0xd5, 0x9e, 0xae, 0x08, 0x81, 0x24, 0x40, 0x0d, 0x65, 0x9c, 0x7e, 0xc2, 0xca, 0xe6, 0x30, 0x5a, 0x24, 0x86, 0xa0, 0x30, 0x10, 0xc7, 0x02, 0xc2, 0x0b, 0x8b, 0xbf, 0xac, 0x6a, 0x32, 0x6e, 0x5e, 0x14, 0xa4, 0x10, 0xa6, 0xfc, 0x5d, 0x59, 0xda, 0x47, 0xbd, 0x20, 0x89, 0x53, 0xc2, 0x86, 0xf7, 0xde, 0x36, 0x6c, 0x56, 0x3f, 0x34, 0xb5, 0x07, 0xa0, 0xd0, 0xa9, 0x23, 0xed, 0xab, 0x43, 0x64, 0x31, 0xbd, 0x1c, 0xa7, 0x4f, 0x9b, 0xbb, 0x13, 0x04, 0xfb, 0x69, 0x74, 0xa1, 0x42, 0x98, 0x56, 0x92, 0x23, 0x14, 0x76, 0xbc, 0x0f, 0xa8, 0xe4, 0x68, 0x78, 0x04, 0x7b, 0xb3, 0xb7, 0x19, 0x02, 0xad, 0xd7},
    {0x9b, 0x44, 0x18, 0xcd, 0xa7, 0xe2, 0x07, 0x24, 0x95, 0x68, 0x7e, 0x10, 0x0f, 0xf3, 0x9c, 0x47, 0x9c, 0xe2, 0xfc, 0x66, 0x1b, 0xfb, 0x38, 0x70, 0xea, 0x7e, 0xbd, 0x18, 0xb1, 0x7e, 0xac, 0xd1, 0x50, 0x6f, 0xca, 0x6f, 0xf9, 0xee, 0x21, 0x20, 0x79, 0xe3, 0x27, 0x79, 0xcb, 0x18, 0xb4, 0x86, 0xb9, 0x89, 0x98, 0xeb, 0x8d, 0xa1, 0x8a, 0x9c, 0x64, 0xfb, 0x28, 0xa2, 0x08, 0x3a, 0x44, 0x7a, 0x7c, 0x5f, 0x30, 0xf4, 0xb7, 0xe9, 0xd3, 0xde, 0x16, 0x90, 0x11, 0xbc, 0x1e, 0x35, 0xd6, 0xde, 0xf5, 0xab, 0x75, 0xd2, 0x96, 0x23, 0x07, 0xfc, 0x53, 0xaf, 0xef, 0x14, 0x7d, 0x7c, 0x8f, 0xcc, 0xff, 0xc4, 0x29, 0x00, 0xfb, 0x94, 0x24, 0x80, 0x7f, 0x8b, 0x52, 0x9f, 0xf3, 0x3c, 0xf5, 0xd9, 0x5f, 0xca, 0x80, 0x4f, 0x18, 0xd5, 0x1c, 0x38, 0xa5, 0x08, 0x4b, 0x30, 0xfc, 0x10, 0xb3, 0x73},
    {0x4d, 0x28, 0xdd, 0x65, 0xb4, 0x2f, 0x82, 0x45, 0x55, 0xc1, 0x00, 0x1d, 0x5c, 0xed, 0xef, 0xf7, 0x85, 0xe6, 0x01, 0xb2, 0x8f, 0xc4, 0x0a, 0x40, 0x14, 0xd1, 0xf6, 0xdd, 0xb2, 0x46, 0x44, 0x95, 0x42, 0xf3, 0x06, 0x4d, 0x96, 0x89, 0xfd, 0x53, 0xf6, 0x33, 0xda, 0x8c, 0x28, 0xd6, 0x81, 0xd1, 0x89, 0x4f, 0x92, 0x8f, 0xfe, 0x82, 0xa8, 0x83, 0xc9, 0xb7, 0xa8, 0xd3, 0x91, 0x52, 0x72, 0x8d, 0xf4, 0x9d, 0xff, 0xbc, 0x34, 0x34, 0x06, 0x80, 0x2e, 0x49, 0x47, 0x51, 0xa0, 0xb8, 0xd8, 0x8f, 0x77, 0x15, 0xc8, 0x78, 0x2b, 0xe8, 0xc2, 0xfc, 0xc7, 0xb3, 0x88, 0x04, 0xf1, 0x6b, 0xe5, 0xdf, 0xee, 0xae, 0x28, 0xe0, 0x26, 0xc9, 0x0a, 0x02, 0x18, 0x48, 0xc2, 0x1c, 0x90, 0x5b, 0xdc, 0x2f, 0x72, 0xda, 0xbd, 0x03, 0x2b, 0xd4, 0x61, 0x9e, 0x62, 0x88, 0x19, 0xba, 0xe5, 0x9f, 0x76, 0xa0},
    {0x2f, 0xda, 0x18, 0x12, 0xf8, 0x43, 0x82, 0xd7, 0x41, 0xf6, 0xfa, 0x44, 0x40, 0x3a, 0x3d, 0xc1, 0x70, 0x69, 0xf9, 0x93, 0x8e, 0xbf, 0xaa, 0xc3, 0xcb, 0xd6, 0x2d, 0x7b, 0x23, 0x54, 0x42, 0xe5, 0xda, 0xe0, 0x74, 0x50, 0xe5, 0xd8, 0x55, 0x2d, 0xba, 0x9b, 0x94, 0x50, 0x5a, 0x4b, 0xef, 0x23, 0xdc, 0x04, 0x77, 0x3a, 0x19, 0x46, 0xee, 0xa4, 0x26, 0x58, 0x08, 0x16, 0x07, 0xda, 0x82, 0x79, 0x30, 0x1e, 0x68, 0xaf, 0x22, 0xf3, 0x16, 0x25, 0xe2, 0x2a, 0x96, 0xee, 0x72, 0x70, 0xd1, 0x02, 0x91, 0x8b, 0x5e, 0x0a, 0x5b, 0x7e, 0xa6, 0xb6, 0x51, 0x05, 0xed, 0xed, 0x81, 0xc0, 0x3e, 0x65, 0x25, 0x95, 0x29, 0x0e, 0x4f, 0xc1, 0x8a, 0x2d, 0x98, 0x59, 0x38, 0xb5, 0x8b, 0x41, 0xf5, 0xd2, 0x68, 0x05, 0x2c, 0xcd, 0x5a, 0x17, 0x02, 0x68, 0x5e, 0x28, 0xab, 0xc8, 0x87, 0x78, 0x50, 0xbe},
}};
std::array<std::array<uint8_t, 24 * NUM_INPUTS>, NUM_HASHERS> enc_inputs_192 = {
};
std::array<std::array<uint8_t, 32 * NUM_INPUTS>, NUM_HASHERS> enc_inputs_256 = {
};

// std::array<std::array<uint8_t, 8>, NUM_HASHERS> expected_outputs_64 = {
// };
std::array<std::array<uint8_t, 16>, NUM_HASHERS> expected_enc_outputs_128 = {{
    {0x6e, 0xf3, 0xbc, 0xf5, 0xf7, 0xa4, 0x10, 0x2e, 0x6c, 0x88, 0x08, 0x6f, 0x22, 0x0d, 0x97, 0x59},
    {0x94, 0x40, 0xd4, 0xb4, 0x60, 0xff, 0xca, 0x03, 0xff, 0xcc, 0x9a, 0xfb, 0x11, 0x55, 0x28, 0x46},
    {0xcc, 0xd0, 0x56, 0xbc, 0xc2, 0xd0, 0x6c, 0xb9, 0x96, 0xcf, 0x50, 0xba, 0x22, 0x9a, 0x01, 0x82},
    {0xbe, 0x77, 0x8a, 0x95, 0x52, 0xff, 0x4b, 0xda, 0x8d, 0x1a, 0x9e, 0x80, 0x63, 0x90, 0x27, 0x9a},
}};
std::array<std::array<uint8_t, 24>, NUM_HASHERS> expected_enc_outputs_192 = {
};
std::array<std::array<uint8_t, 32>, NUM_HASHERS> expected_enc_outputs_256 = {
};



TEST_CASE( "hasher secpar", "[universal hash]" ) {
    hasher_gfsecpar_key hash_key;
    hasher_gfsecpar_state hash_state;

#if SECURITY_PARAM == 128
    const auto* key_poly_p = enc_keys_128.data();
    const auto* inputs_poly_p = enc_inputs_128.data();
    const auto* expected_outputs_poly_p = expected_enc_outputs_128.data();
#elif SECURITY_PARAM == 192
    const auto* key_poly_p = enc_keys_192.data();
    const auto* inputs_poly_p = enc_inputs_192.data();
    const auto* expected_outputs_poly_p = expected_enc_outputs_192.data();
#elif SECURITY_PARAM == 256
    const auto* key_poly_p = enc_keys_192.data();
    const auto* inputs_poly_p = enc_inputs_192.data();
    const auto* expected_outputs_poly_p = expected_enc_outputs_192.data();
#endif

    const size_t OFFSET = SECURITY_PARAM / 8;

#if POLY_VEC_LEN == 1
    for (size_t i = 0; i < NUM_HASHERS; ++i) {
        hasher_gfsecpar_init_key(&hash_key, poly_secpar_load(&key_poly_p[i]));
        hasher_gfsecpar_init_state(&hash_state, NUM_INPUTS);
        for (size_t j = 0; j < NUM_INPUTS; ++j) {
            hasher_gfsecpar_update(&hash_key, &hash_state, poly_secpar_load(&inputs_poly_p[i][j * OFFSET]));
        }
        poly_secpar_vec hash = hasher_gfsecpar_final(&hash_state);
        poly_secpar_vec expected_hash = poly_secpar_load(&expected_outputs_poly_p[i]);
#if SECURITY_PARAM == 128
        REQUIRE_POLY128VEC_EQ(hash, expected_hash);
#elif SECURITY_PARAM == 192
        REQUIRE_POLY192VEC_EQ(hash, expected_hash);
#elif SECURITY_PARAM == 256
        REQUIRE_POLY256VEC_EQ(hash, expected_hash);
#endif
        break;
    }
#else
#error "not implemented"
#endif
}
