
#include <array>
#include <vector>

#include "test.hpp"

extern "C" {

#define restrict __restrict__
#include "prgs.h"
#include "small_vole.h"
#include "vector_com.h"

}

#include "catch_amalgamated.hpp"


typedef std::array<uint8_t, SECURITY_PARAM / 8> arr_secpar;
typedef std::array<uint8_t, 2 * SECURITY_PARAM / 8> arr_2secpar;


TEST_CASE( "commit/open/verify", "[vector com]" ) {

    block_secpar seed = rand<block_secpar>();
    std::vector<block_secpar> forest(VECTOR_COMMIT_NODES);
    std::vector<block_secpar> leaves_sender(VECTOR_COMMIT_LEAVES);
    std::vector<block_secpar> leaves_receiver(VECTOR_COMMIT_LEAVES);
    std::vector<block_2secpar> hashed_leaves_sender(VECTOR_COMMIT_LEAVES);
    std::vector<block_2secpar> hashed_leaves_receiver(VECTOR_COMMIT_LEAVES);

    const size_t delta = 42 % (1 << VOLE_MIN_K);

    std::vector<uint8_t> delta_bytes(SECURITY_PARAM, 0);
    for (size_t i = 0, dst = 0; i < BITS_PER_WITNESS; ++i)
    {
        size_t k = i < VOLES_MAX_K ? VOLE_MAX_K : VOLE_MIN_K;
        expand_bits_to_bytes(&delta_bytes[dst], k, delta);
        dst += k;
    }

    std::vector<unsigned char> opening(VECTOR_OPEN_SIZE);

    vector_commit(seed, forest.data(), leaves_sender.data(), hashed_leaves_sender.data());
    vector_open(forest.data(), hashed_leaves_sender.data(), delta_bytes.data(), opening.data());
    vector_verify(opening.data(), delta_bytes.data(), leaves_receiver.data(), hashed_leaves_receiver.data());

    const auto hashed_leaves_sender_bytes = std::vector(reinterpret_cast<arr_2secpar*>(hashed_leaves_sender.data()),
                                                        reinterpret_cast<arr_2secpar*>(hashed_leaves_sender.data() + hashed_leaves_sender.size()));
    const auto hashed_leaves_receiver_bytes = std::vector(reinterpret_cast<arr_2secpar*>(hashed_leaves_receiver.data()),
                                                          reinterpret_cast<arr_2secpar*>(hashed_leaves_receiver.data() + hashed_leaves_receiver.size()));
    REQUIRE( hashed_leaves_receiver_bytes == hashed_leaves_sender_bytes );

    for (size_t i = 0, src = 0; i < BITS_PER_WITNESS; ++i)
    {
        size_t k = i < VOLES_MAX_K ? VOLE_MAX_K : VOLE_MIN_K;
        for (size_t j = 0; j < (size_t) 1 << k; ++j)
        {
            if (j == delta)
                continue;

            arr_secpar sender_leaf, receiver_leaf;
            memcpy(&sender_leaf, &leaves_sender[src + vole_permute_key_index_inv(j)], sender_leaf.size());
            memcpy(&receiver_leaf, &leaves_receiver[src + vole_permute_key_index_inv(j ^ delta)], receiver_leaf.size());
            INFO(i);
            INFO(j);
            REQUIRE(sender_leaf == receiver_leaf);
        }

        src += (size_t) 1 << k;
    }
}

#if BITS_PER_WITNESS == 32 && SECURITY_PARAM == 128

namespace tv128 {
    // test vectors from faest-ref
    constexpr unsigned int test_vectors = 4;
    constexpr unsigned int depth = 4;
    static_assert(depth == VOLE_MAX_K);

    constexpr std::array<uint8_t, 16> root_key{
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    };
    // the hashed leaves
    constexpr std::array<uint8_t, (1 << depth) * SECURITY_PARAM / 8 * 2> com{
        0x0f, 0xbc, 0x54, 0x0a, 0xc5, 0x0e, 0xec, 0x23, 0xc7, 0x9d, 0xa9, 0x3a, 0xb9, 0x54, 0xfa,
        0x30, 0xe7, 0x72, 0x6b, 0xa8, 0xa8, 0xc5, 0xfb, 0x6c, 0x7b, 0x84, 0x49, 0xcf, 0x5d, 0xf1,
        0x8d, 0x5a, 0x91, 0x19, 0x5c, 0xd4, 0x4d, 0x2d, 0x78, 0xae, 0xdc, 0x7a, 0x37, 0xe3, 0x98,
        0x69, 0x18, 0x87, 0x4f, 0x44, 0xe4, 0xcf, 0xa1, 0x01, 0x26, 0x37, 0x3e, 0xc8, 0x32, 0xcd,
        0xc2, 0x51, 0xe2, 0x19, 0xc8, 0xe2, 0xa8, 0x1b, 0xc4, 0x0e, 0xeb, 0x69, 0x9e, 0x12, 0x27,
        0x98, 0x87, 0xe4, 0xd0, 0xd0, 0x4e, 0x50, 0x8e, 0x77, 0x0a, 0x2a, 0xc5, 0x39, 0xb7, 0xab,
        0xb8, 0x46, 0x70, 0xa9, 0x3c, 0x10, 0xf5, 0x13, 0x54, 0xf0, 0x37, 0x68, 0xea, 0x61, 0x95,
        0x2a, 0x85, 0xe4, 0x18, 0x99, 0x4b, 0xb7, 0x89, 0x3f, 0x31, 0x0e, 0x7a, 0x17, 0x3b, 0x5e,
        0x87, 0x8c, 0x8d, 0x89, 0x05, 0x97, 0x63, 0x3f, 0x6a, 0x2f, 0x0d, 0x24, 0x01, 0x64, 0xa0,
        0x76, 0xb1, 0x27, 0x26, 0x60, 0x61, 0xe8, 0x75, 0xf7, 0x43, 0x98, 0x0a, 0xed, 0x56, 0xcc,
        0xde, 0xda, 0x76, 0x1b, 0xef, 0xfa, 0xcb, 0xee, 0xd5, 0xb9, 0xb6, 0x27, 0xa2, 0x6e, 0xe0,
        0x62, 0xb4, 0x7c, 0x7f, 0x99, 0x46, 0x42, 0x1f, 0xb7, 0x7c, 0xca, 0x24, 0x3d, 0xc5, 0x06,
        0x30, 0xd9, 0x9e, 0xc8, 0xba, 0xa6, 0xa2, 0x93, 0xaf, 0xf0, 0xc7, 0xb7, 0xd4, 0x88, 0x3f,
        0x95, 0x00, 0xca, 0xca, 0xd7, 0x4c, 0x9e, 0x66, 0xad, 0xa6, 0xc2, 0x8f, 0x7a, 0xfe, 0x7d,
        0x85, 0x83, 0x02, 0x6a, 0x73, 0x88, 0x62, 0xe0, 0x75, 0x8c, 0x1b, 0xf5, 0x90, 0x66, 0xad,
        0xbb, 0xe0, 0x04, 0xef, 0x64, 0x22, 0xa0, 0xcf, 0x3f, 0x7d, 0x21, 0x06, 0x07, 0xc4, 0x08,
        0x2b, 0x11, 0x2a, 0x7b, 0xdd, 0x19, 0xdb, 0x8c, 0xab, 0x6c, 0x9f, 0x50, 0x30, 0x51, 0x2d,
        0xd7, 0x7e, 0x7a, 0xdf, 0x69, 0x5e, 0xbd, 0xba, 0xbf, 0x46, 0x74, 0x76, 0x92, 0xc9, 0xbc,
        0x3d, 0xf2, 0xcb, 0x8d, 0xc8, 0xaf, 0xa4, 0x9e, 0x27, 0xa8, 0x1e, 0x1e, 0x56, 0x36, 0x89,
        0xf1, 0xee, 0x66, 0x88, 0x82, 0xd6, 0x66, 0x8f, 0x65, 0x8b, 0xcc, 0x21, 0x0d, 0xd0, 0xae,
        0x54, 0x7f, 0x13, 0x11, 0x84, 0xfe, 0x5d, 0x2c, 0x6d, 0x19, 0xed, 0x7d, 0xd1, 0x19, 0x1e,
        0x98, 0x38, 0x5c, 0x2c, 0x5d, 0xac, 0x97, 0x6c, 0xab, 0x37, 0xb8, 0x76, 0xe9, 0x8e, 0xbb,
        0xab, 0xa5, 0x73, 0x13, 0xcd, 0xbd, 0x9b, 0x51, 0x07, 0x8e, 0x70, 0x8e, 0xa1, 0xd8, 0x66,
        0xf1, 0xbf, 0x84, 0x1f, 0x38, 0x7a, 0x56, 0x81, 0x2c, 0x75, 0xc7, 0x5a, 0x54, 0x98, 0x4e,
        0x11, 0x03, 0x34, 0xa9, 0x42, 0xa3, 0xda, 0xa5, 0x8a, 0x98, 0x56, 0xe6, 0x86, 0xae, 0x09,
        0x5f, 0xfc, 0x32, 0x24, 0x10, 0x23, 0x49, 0xaa, 0xdc, 0x70, 0x20, 0x56, 0x92, 0x59, 0xdc,
        0xb5, 0x37, 0xaf, 0xf4, 0xb7, 0x09, 0x20, 0x25, 0xdf, 0x0f, 0xdb, 0xa7, 0x42, 0x1f, 0x74,
        0x64, 0xc5, 0x7a, 0x1a, 0xc6, 0xe6, 0x21, 0x8e, 0x98, 0x5e, 0xe2, 0x32, 0xf4, 0x00, 0x06,
        0xb1, 0x68, 0x54, 0xef, 0x6b, 0x5b, 0x14, 0x18, 0x75, 0x85, 0x55, 0x6c, 0xf5, 0x7c, 0x74,
        0xbb, 0x08, 0x42, 0x57, 0xf5, 0x7d, 0xc7, 0x39, 0x44, 0xd1, 0x22, 0xeb, 0xc2, 0xed, 0x7f,
        0x9d, 0xa3, 0x23, 0xb5, 0x4a, 0x04, 0x65, 0x75, 0x93, 0x7c, 0xca, 0xf8, 0xc5, 0x95, 0xaf,
        0x65, 0x7f, 0x44, 0x2c, 0xe7, 0xf5, 0x21, 0x31, 0xc5, 0x36, 0xb3, 0x62, 0x2e, 0x9b, 0xbe,
        0x1c, 0x62, 0x34, 0xfb, 0x52, 0xe8, 0x7e, 0xe0, 0xac, 0x73, 0xfb, 0xe7, 0x10, 0xc8, 0x1c,
        0x66, 0x99, 0x6f, 0x9c, 0x2a, 0xc9, 0xd6, 0xd6, 0x3e, 0x3a, 0x07, 0xf2, 0x3d, 0xd1, 0x95,
        0xc8, 0xe8,
    };
    constexpr std::array<uint8_t, test_vectors * depth * SECURITY_PARAM / 8> pdec_j{
        0x73, 0x46, 0x13, 0x95, 0x95, 0xc0, 0xb4, 0x1e, 0x49, 0x7b, 0xbd, 0xe3, 0x65, 0xf4, 0x2d,
        0x0a, 0xb7, 0x5b, 0x1a, 0x66, 0xb8, 0xa4, 0x21, 0x3a, 0xb3, 0xf5, 0xd7, 0x3e, 0x3b, 0xa9,
        0x8a, 0x87, 0x66, 0x80, 0x4f, 0xa3, 0xa1, 0x3a, 0x7e, 0x39, 0x1c, 0xa2, 0xcd, 0xe3, 0x7c,
        0x7c, 0x9e, 0xcf, 0x53, 0x81, 0x5c, 0x98, 0x70, 0xfa, 0xbc, 0xdc, 0xe3, 0x25, 0x1a, 0xe9,
        0xba, 0xa1, 0x0d, 0xdd, 0x73, 0x46, 0x13, 0x95, 0x95, 0xc0, 0xb4, 0x1e, 0x49, 0x7b, 0xbd,
        0xe3, 0x65, 0xf4, 0x2d, 0x0a, 0xb7, 0x5b, 0x1a, 0x66, 0xb8, 0xa4, 0x21, 0x3a, 0xb3, 0xf5,
        0xd7, 0x3e, 0x3b, 0xa9, 0x8a, 0x87, 0x66, 0x80, 0x4f, 0xa3, 0xa1, 0x3a, 0x7e, 0x39, 0x1c,
        0xa2, 0xcd, 0xe3, 0x7c, 0x7c, 0x9e, 0xcf, 0x83, 0x84, 0xe6, 0xcd, 0x73, 0x58, 0x8b, 0xb3,
        0xba, 0x12, 0x0f, 0xb0, 0x86, 0xfe, 0x4c, 0xfc, 0x73, 0x46, 0x13, 0x95, 0x95, 0xc0, 0xb4,
        0x1e, 0x49, 0x7b, 0xbd, 0xe3, 0x65, 0xf4, 0x2d, 0x0a, 0xb7, 0x5b, 0x1a, 0x66, 0xb8, 0xa4,
        0x21, 0x3a, 0xb3, 0xf5, 0xd7, 0x3e, 0x3b, 0xa9, 0x8a, 0x87, 0x7f, 0xd3, 0x3c, 0x93, 0x31,
        0x62, 0x41, 0xbe, 0x4b, 0xe3, 0x3f, 0xa2, 0x1e, 0xb6, 0x64, 0x1c, 0x81, 0x90, 0xd9, 0x7a,
        0x1e, 0xdb, 0x75, 0x95, 0x22, 0x5a, 0x77, 0x00, 0x2d, 0x04, 0xe3, 0x21, 0x73, 0x46, 0x13,
        0x95, 0x95, 0xc0, 0xb4, 0x1e, 0x49, 0x7b, 0xbd, 0xe3, 0x65, 0xf4, 0x2d, 0x0a, 0xb7, 0x5b,
        0x1a, 0x66, 0xb8, 0xa4, 0x21, 0x3a, 0xb3, 0xf5, 0xd7, 0x3e, 0x3b, 0xa9, 0x8a, 0x87, 0x7f,
        0xd3, 0x3c, 0x93, 0x31, 0x62, 0x41, 0xbe, 0x4b, 0xe3, 0x3f, 0xa2, 0x1e, 0xb6, 0x64, 0x1c,
        0xe7, 0x10, 0x19, 0xb7, 0x88, 0x81, 0x34, 0x0c, 0xbf, 0x8e, 0x82, 0x6c, 0x6e, 0xd6, 0x3b,
        0xc5,
    };
    constexpr std::array<uint8_t, test_vectors * SECURITY_PARAM / 8 * 2> com_j{
        0x0f, 0xbc, 0x54, 0x0a, 0xc5, 0x0e, 0xec, 0x23, 0xc7, 0x9d, 0xa9, 0x3a, 0xb9, 0x54, 0xfa,
        0x30, 0xe7, 0x72, 0x6b, 0xa8, 0xa8, 0xc5, 0xfb, 0x6c, 0x7b, 0x84, 0x49, 0xcf, 0x5d, 0xf1,
        0x8d, 0x5a, 0x91, 0x19, 0x5c, 0xd4, 0x4d, 0x2d, 0x78, 0xae, 0xdc, 0x7a, 0x37, 0xe3, 0x98,
        0x69, 0x18, 0x87, 0x4f, 0x44, 0xe4, 0xcf, 0xa1, 0x01, 0x26, 0x37, 0x3e, 0xc8, 0x32, 0xcd,
        0xc2, 0x51, 0xe2, 0x19, 0xc8, 0xe2, 0xa8, 0x1b, 0xc4, 0x0e, 0xeb, 0x69, 0x9e, 0x12, 0x27,
        0x98, 0x87, 0xe4, 0xd0, 0xd0, 0x4e, 0x50, 0x8e, 0x77, 0x0a, 0x2a, 0xc5, 0x39, 0xb7, 0xab,
        0xb8, 0x46, 0x70, 0xa9, 0x3c, 0x10, 0xf5, 0x13, 0x54, 0xf0, 0x37, 0x68, 0xea, 0x61, 0x95,
        0x2a, 0x85, 0xe4, 0x18, 0x99, 0x4b, 0xb7, 0x89, 0x3f, 0x31, 0x0e, 0x7a, 0x17, 0x3b, 0x5e,
        0x87, 0x8c, 0x8d, 0x89, 0x05, 0x97, 0x63, 0x3f,
    };
}

#elif BITS_PER_WITNESS == 48 && SECURITY_PARAM == 192

namespace tv192 {
    // test vectors from faest-ref
    constexpr unsigned int test_vectors = 4;
    constexpr unsigned int depth = 4;
    static_assert(depth == VOLE_MAX_K);

    constexpr std::array<uint8_t, 24> root_key{
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
        0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    };
    // the hashed leaves
    constexpr std::array<uint8_t, (1 << depth) * SECURITY_PARAM / 8 * 2> com{
        0xfc, 0xf7, 0x2f, 0xf6, 0x04, 0x55, 0xdd, 0x1e, 0x41, 0x23, 0x50, 0x83, 0x2c, 0x6d, 0x6a,
        0x1d, 0x76, 0xc2, 0x0e, 0x2e, 0x57, 0x40, 0x5b, 0x49, 0x32, 0xab, 0x12, 0xad, 0xfd, 0x33,
        0xe0, 0x07, 0xe6, 0x2d, 0x7f, 0x6e, 0x44, 0x61, 0x49, 0x0d, 0xd3, 0xc3, 0x3c, 0xa8, 0x1c,
        0x3e, 0x79, 0x65, 0xf9, 0x49, 0xfd, 0x7a, 0xcd, 0x69, 0x33, 0x55, 0xf9, 0x98, 0x7d, 0x04,
        0xdd, 0xb2, 0x3c, 0x19, 0x60, 0xc7, 0x24, 0x5e, 0x65, 0x44, 0x3a, 0x2b, 0x56, 0x65, 0xb7,
        0x21, 0xd7, 0x4a, 0x82, 0x6c, 0x12, 0x0e, 0x32, 0x43, 0xc2, 0x39, 0x88, 0xf9, 0x4a, 0x81,
        0x01, 0xdc, 0x9a, 0x43, 0xec, 0x9e, 0xbe, 0x83, 0x23, 0x47, 0x69, 0x2a, 0x1b, 0xee, 0xbd,
        0x1e, 0x10, 0xa2, 0xbf, 0xa4, 0x14, 0x56, 0x2b, 0x68, 0xfd, 0x7b, 0x9d, 0x7f, 0xb5, 0x91,
        0x05, 0x5b, 0xe3, 0x7f, 0x15, 0xd2, 0xa7, 0xb0, 0xee, 0x1a, 0xec, 0xe9, 0x29, 0x9d, 0xef,
        0x78, 0xf2, 0x37, 0xe4, 0xf6, 0xcc, 0xab, 0xf2, 0x78, 0xf5, 0x45, 0x4f, 0x7b, 0x8f, 0x00,
        0x15, 0xc1, 0x8a, 0x4c, 0x74, 0xe2, 0xea, 0x38, 0x4c, 0x8d, 0x27, 0x2a, 0x35, 0x99, 0x78,
        0x08, 0xf8, 0x3b, 0x9a, 0xe7, 0xff, 0x42, 0xe9, 0x59, 0xd3, 0xea, 0x3a, 0xcc, 0x56, 0xa5,
        0xe7, 0x1d, 0x40, 0x6f, 0x1b, 0x49, 0xc5, 0x9f, 0x21, 0x57, 0x96, 0xa1, 0x6d, 0xf6, 0x74,
        0xf0, 0xe2, 0xf1, 0x0a, 0xfd, 0xb0, 0xcc, 0x8b, 0x3b, 0xe7, 0x3e, 0x5f, 0xa9, 0x1c, 0xfa,
        0xdc, 0x41, 0x51, 0x3b, 0x3d, 0x27, 0x19, 0xfa, 0x8a, 0x03, 0x33, 0x6b, 0x9f, 0xe3, 0x71,
        0xa6, 0xea, 0x25, 0x07, 0x3e, 0xe2, 0xe2, 0x46, 0x74, 0xd7, 0x09, 0x57, 0x9f, 0x52, 0xd8,
        0x64, 0x6f, 0x0f, 0xe5, 0x91, 0x21, 0xbd, 0x8a, 0xe5, 0x5d, 0x56, 0xf9, 0x27, 0xf2, 0x7f,
        0x81, 0xb1, 0x62, 0xd8, 0x70, 0x51, 0x48, 0xaa, 0xdd, 0x75, 0xea, 0x4a, 0x06, 0x88, 0x74,
        0xf6, 0xb0, 0x82, 0x5b, 0x5c, 0x1f, 0xb9, 0xb5, 0xeb, 0x05, 0x53, 0x59, 0xa1, 0xc4, 0xd8,
        0x75, 0x73, 0xe0, 0x77, 0x7e, 0xb6, 0xcd, 0x7e, 0xa7, 0x62, 0x98, 0x03, 0x64, 0xfb, 0x79,
        0x3f, 0x9a, 0xc1, 0x27, 0x1b, 0xb5, 0x31, 0x44, 0xab, 0x82, 0x60, 0x38, 0x9a, 0x1c, 0x0a,
        0x20, 0x9f, 0xaa, 0xf9, 0x33, 0xf0, 0xae, 0xa8, 0x94, 0x57, 0xd7, 0x7c, 0x7f, 0x9f, 0xf5,
        0xa0, 0xdd, 0x8e, 0x3b, 0x12, 0xef, 0xae, 0x85, 0x58, 0xa4, 0x50, 0xa5, 0x83, 0xa1, 0x4a,
        0x16, 0x99, 0x81, 0xd3, 0x93, 0xa3, 0x4c, 0x83, 0x1d, 0x83, 0x7c, 0x30, 0xf2, 0x18, 0xaf,
        0x0a, 0x57, 0x54, 0x17, 0x3c, 0xd7, 0x01, 0x3c, 0xfb, 0xd4, 0xf1, 0x62, 0x87, 0x4c, 0x7c,
        0xe8, 0x41, 0xd0, 0x74, 0xdf, 0xd6, 0x99, 0x51, 0xe0, 0xd6, 0x5c, 0x4a, 0x49, 0xd2, 0xcb,
        0xba, 0xcf, 0x25, 0x2d, 0x21, 0x9a, 0x8c, 0x20, 0xc9, 0x36, 0xd9, 0x9e, 0x47, 0xce, 0xa6,
        0x7a, 0x53, 0xec, 0x6e, 0xbb, 0x1b, 0x4a, 0xb9, 0xa5, 0x76, 0x7d, 0xc0, 0xc6, 0x5d, 0x33,
        0x4f, 0x43, 0x49, 0x98, 0xc3, 0x93, 0xf5, 0xe2, 0x98, 0x65, 0x44, 0x8f, 0xee, 0xd7, 0x7b,
        0x03, 0x7b, 0x2b, 0xa1, 0xcc, 0xbe, 0x45, 0xdd, 0x63, 0x36, 0xeb, 0xf3, 0x74, 0xa2, 0x63,
        0xef, 0x1a, 0x9f, 0xf5, 0x74, 0x8c, 0xf7, 0x67, 0xec, 0x0c, 0x9e, 0xd0, 0xa2, 0xa6, 0xbf,
        0xa8, 0xcf, 0xc9, 0x63, 0x19, 0x83, 0x38, 0xd7, 0x90, 0xba, 0x93, 0x61, 0x53, 0x28, 0xf1,
        0xbd, 0xda, 0x2d, 0x49, 0x02, 0xd2, 0x8d, 0xa3, 0xda, 0xb9, 0x2c, 0x3d, 0x34, 0xd6, 0x65,
        0xa0, 0xc3, 0xd8, 0x49, 0x87, 0xef, 0xf2, 0xcf, 0x9e, 0xee, 0x3c, 0xb6, 0xec, 0xc3, 0x54,
        0x1c, 0xcf, 0x4f, 0x9e, 0x13, 0x99, 0x78, 0xc7, 0x65, 0x86, 0xb6, 0xdd, 0x80, 0xce, 0xc0,
        0x35, 0xd2, 0x83, 0xf9, 0xfb, 0xa9, 0x98, 0x97, 0xcb, 0xdf, 0x4b, 0x50, 0x1e, 0x02, 0x53,
        0x2f, 0x63, 0xdb, 0xf7, 0x43, 0xea, 0x97, 0x41, 0x22, 0x9b, 0x5a, 0x4d, 0x7c, 0x3c, 0xc8,
        0xaf, 0x05, 0x7b, 0x20, 0x94, 0x74, 0xe9, 0xa4, 0xbc, 0xb3, 0xfc, 0xaf, 0xd6, 0xdb, 0x89,
        0xe3, 0x59, 0xd5, 0xb2, 0xd2, 0x4c, 0x5a, 0x1f, 0x6d, 0xe6, 0xea, 0x48, 0x62, 0xeb, 0xc7,
        0xf7, 0x7e, 0x33, 0x8c, 0x29, 0xa3, 0x5d, 0x35, 0xad, 0x29, 0x18, 0x0d, 0x06, 0xe5, 0x51,
        0x88, 0x16, 0xc2, 0xba, 0x3a, 0x9e, 0x8c, 0x37, 0x07, 0xc3, 0xec, 0xba, 0xe5, 0x0c, 0x5d,
        0x08, 0x13, 0x6b, 0xb8, 0xa6, 0xb7, 0x87, 0xf5, 0xa8, 0x9f, 0xc8, 0x7a, 0x9e, 0xcb, 0xc4,
        0x48, 0x55, 0x1a, 0x2b, 0x06, 0x4a, 0x65, 0x7c, 0xa7, 0x13, 0xdf, 0x8c, 0xed, 0x2b, 0x69,
        0x5e, 0xf7, 0x53, 0x88, 0x17, 0x86, 0x89, 0x1c, 0x37, 0x8c, 0x09, 0x47, 0xae, 0xe1, 0x71,
        0xef, 0x5e, 0xa4, 0xd4, 0xc3, 0xca, 0xb2, 0x74, 0x28, 0x8a, 0x68, 0xd3, 0x1f, 0xf2, 0x44,
        0xbc, 0xe0, 0x44, 0xd7, 0x0a, 0xae, 0x77, 0x5e, 0x1f, 0x81, 0x49, 0x87, 0x7f, 0x5a, 0x28,
        0x79, 0xee, 0xe8, 0x8b, 0xa6, 0x5b, 0x74, 0xc9, 0xa9, 0xc6, 0xc7, 0x32, 0x9d, 0x1c, 0xf9,
        0x17, 0xfa, 0x16, 0x8c, 0x48, 0x59, 0x8a, 0x86, 0x84, 0x2a, 0xc8, 0x48, 0x48, 0x39, 0x0b,
        0xa0, 0x58, 0xf3, 0x24, 0xa4, 0xa3, 0x1b, 0x12, 0xe5, 0xb3, 0xf9, 0xb5, 0xd7, 0x1b, 0xdd,
        0x15, 0x84, 0x7d, 0xb4, 0x96, 0xd9, 0x07, 0xcd, 0xdd, 0xf2, 0x4c, 0x5c, 0xe7, 0x94, 0x84,
        0x9d, 0xd9, 0x94, 0x56, 0x9b, 0x60, 0x22, 0x9b, 0x0f, 0x3c, 0x22, 0x88, 0x2c, 0xc4, 0x40,
        0x4c, 0xc3, 0x7c,
    };
    constexpr std::array<uint8_t, test_vectors * depth * SECURITY_PARAM / 8> pdec_j{
        0x13, 0xea, 0xec, 0xa8, 0x08, 0x62, 0x67, 0x17, 0xdb, 0x03, 0x12, 0x8b, 0xb7, 0x4d, 0x24,
        0x2c, 0x83, 0x42, 0x42, 0x26, 0xf7, 0xca, 0x25, 0xc6, 0x36, 0xb7, 0x3f, 0xe8, 0xd0, 0xe1,
        0xea, 0x75, 0x95, 0x76, 0x59, 0x17, 0x6e, 0xf6, 0x97, 0x91, 0x14, 0x3a, 0x72, 0x0c, 0x0e,
        0xc0, 0x13, 0x9b, 0x08, 0x3c, 0xba, 0xb3, 0x7b, 0x51, 0x51, 0xc9, 0x5b, 0x38, 0x82, 0xf9,
        0x8e, 0xf5, 0x96, 0x11, 0x49, 0x82, 0x81, 0x57, 0xae, 0xfe, 0x05, 0x07, 0x8a, 0x85, 0x1b,
        0x7f, 0x4e, 0xe6, 0x99, 0x42, 0x3e, 0x6c, 0xa0, 0xe2, 0x61, 0x84, 0xf9, 0xab, 0x5e, 0xc0,
        0x2b, 0x58, 0xfe, 0xb2, 0x89, 0x42, 0x13, 0xea, 0xec, 0xa8, 0x08, 0x62, 0x67, 0x17, 0xdb,
        0x03, 0x12, 0x8b, 0xb7, 0x4d, 0x24, 0x2c, 0x83, 0x42, 0x42, 0x26, 0xf7, 0xca, 0x25, 0xc6,
        0x36, 0xb7, 0x3f, 0xe8, 0xd0, 0xe1, 0xea, 0x75, 0x95, 0x76, 0x59, 0x17, 0x6e, 0xf6, 0x97,
        0x91, 0x14, 0x3a, 0x72, 0x0c, 0x0e, 0xc0, 0x13, 0x9b, 0x08, 0x3c, 0xba, 0xb3, 0x7b, 0x51,
        0x51, 0xc9, 0x5b, 0x38, 0x82, 0xf9, 0x8e, 0xf5, 0x96, 0x11, 0x49, 0x82, 0x81, 0x57, 0xae,
        0xfe, 0x05, 0x07, 0xaf, 0xfe, 0xf5, 0x5d, 0x89, 0x0d, 0x51, 0x35, 0x9a, 0x3a, 0x9f, 0x24,
        0x0a, 0xe8, 0x65, 0x64, 0xcc, 0xeb, 0x31, 0xad, 0x25, 0x67, 0x5a, 0x88, 0x13, 0xea, 0xec,
        0xa8, 0x08, 0x62, 0x67, 0x17, 0xdb, 0x03, 0x12, 0x8b, 0xb7, 0x4d, 0x24, 0x2c, 0x83, 0x42,
        0x42, 0x26, 0xf7, 0xca, 0x25, 0xc6, 0x36, 0xb7, 0x3f, 0xe8, 0xd0, 0xe1, 0xea, 0x75, 0x95,
        0x76, 0x59, 0x17, 0x6e, 0xf6, 0x97, 0x91, 0x14, 0x3a, 0x72, 0x0c, 0x0e, 0xc0, 0x13, 0x9b,
        0x25, 0x01, 0xf5, 0xee, 0x12, 0x58, 0xfa, 0xee, 0xda, 0x9f, 0xbe, 0xd5, 0xeb, 0x2d, 0xdb,
        0x94, 0x1b, 0xef, 0x20, 0x21, 0xe0, 0x1d, 0x30, 0x42, 0x36, 0xdd, 0xbe, 0xfe, 0xc8, 0xa0,
        0xb4, 0x88, 0x4d, 0x8d, 0x7d, 0x15, 0x67, 0xee, 0x8f, 0x31, 0x35, 0xf1, 0x25, 0x12, 0x04,
        0xba, 0x54, 0x17, 0x13, 0xea, 0xec, 0xa8, 0x08, 0x62, 0x67, 0x17, 0xdb, 0x03, 0x12, 0x8b,
        0xb7, 0x4d, 0x24, 0x2c, 0x83, 0x42, 0x42, 0x26, 0xf7, 0xca, 0x25, 0xc6, 0x36, 0xb7, 0x3f,
        0xe8, 0xd0, 0xe1, 0xea, 0x75, 0x95, 0x76, 0x59, 0x17, 0x6e, 0xf6, 0x97, 0x91, 0x14, 0x3a,
        0x72, 0x0c, 0x0e, 0xc0, 0x13, 0x9b, 0x25, 0x01, 0xf5, 0xee, 0x12, 0x58, 0xfa, 0xee, 0xda,
        0x9f, 0xbe, 0xd5, 0xeb, 0x2d, 0xdb, 0x94, 0x1b, 0xef, 0x20, 0x21, 0xe0, 0x1d, 0x30, 0x42,
        0x10, 0xcd, 0x70, 0x8f, 0x1f, 0x2c, 0x09, 0xfd, 0xac, 0xc1, 0x6a, 0x18, 0x32, 0x39, 0x33,
        0x14, 0x81, 0x74, 0x65, 0xbb, 0xe3, 0x48, 0x71, 0xc9,
    };
    constexpr std::array<uint8_t, test_vectors * SECURITY_PARAM / 8 * 2> com_j{
        0xfc, 0xf7, 0x2f, 0xf6, 0x04, 0x55, 0xdd, 0x1e, 0x41, 0x23, 0x50, 0x83, 0x2c, 0x6d, 0x6a,
        0x1d, 0x76, 0xc2, 0x0e, 0x2e, 0x57, 0x40, 0x5b, 0x49, 0x32, 0xab, 0x12, 0xad, 0xfd, 0x33,
        0xe0, 0x07, 0xe6, 0x2d, 0x7f, 0x6e, 0x44, 0x61, 0x49, 0x0d, 0xd3, 0xc3, 0x3c, 0xa8, 0x1c,
        0x3e, 0x79, 0x65, 0xf9, 0x49, 0xfd, 0x7a, 0xcd, 0x69, 0x33, 0x55, 0xf9, 0x98, 0x7d, 0x04,
        0xdd, 0xb2, 0x3c, 0x19, 0x60, 0xc7, 0x24, 0x5e, 0x65, 0x44, 0x3a, 0x2b, 0x56, 0x65, 0xb7,
        0x21, 0xd7, 0x4a, 0x82, 0x6c, 0x12, 0x0e, 0x32, 0x43, 0xc2, 0x39, 0x88, 0xf9, 0x4a, 0x81,
        0x01, 0xdc, 0x9a, 0x43, 0xec, 0x9e, 0xbe, 0x83, 0x23, 0x47, 0x69, 0x2a, 0x1b, 0xee, 0xbd,
        0x1e, 0x10, 0xa2, 0xbf, 0xa4, 0x14, 0x56, 0x2b, 0x68, 0xfd, 0x7b, 0x9d, 0x7f, 0xb5, 0x91,
        0x05, 0x5b, 0xe3, 0x7f, 0x15, 0xd2, 0xa7, 0xb0, 0xee, 0x1a, 0xec, 0xe9, 0x29, 0x9d, 0xef,
        0x78, 0xf2, 0x37, 0xe4, 0xf6, 0xcc, 0xab, 0xf2, 0x78, 0xf5, 0x45, 0x4f, 0x7b, 0x8f, 0x00,
        0x15, 0xc1, 0x8a, 0x4c, 0x74, 0xe2, 0xea, 0x38, 0x4c, 0x8d, 0x27, 0x2a, 0x35, 0x99, 0x78,
        0x08, 0xf8, 0x3b, 0x9a, 0xe7, 0xff, 0x42, 0xe9, 0x59, 0xd3, 0xea, 0x3a, 0xcc, 0x56, 0xa5,
        0xe7, 0x1d, 0x40, 0x6f, 0x1b, 0x49, 0xc5, 0x9f, 0x21, 0x57, 0x96, 0xa1,
    };
}

#elif BITS_PER_WITNESS == 52 && SECURITY_PARAM == 256

namespace tv256 {
    // test vectors from faest-ref
    constexpr unsigned int test_vectors = 4;
    constexpr unsigned int depth = 5;
    static_assert(depth == VOLE_MAX_K);

    constexpr std::array<uint8_t, 32> root_key{
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
        0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
        0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    };
    // the hashed leaves
    constexpr std::array<uint8_t, (1 << depth) * SECURITY_PARAM / 8 * 2> com{
        0x5c, 0x3d, 0xc2, 0x4c, 0x9f, 0x91, 0xba, 0x49, 0x21, 0xdd, 0x60, 0x7b, 0xf4, 0xba, 0x26,
        0xa0, 0x5c, 0x8d, 0xf5, 0xe4, 0xff, 0x5e, 0xfa, 0x7f, 0x8c, 0xbf, 0xf5, 0x6d, 0x25, 0xaf,
        0xc8, 0x85, 0x14, 0xdd, 0xc3, 0xe9, 0x02, 0xf6, 0x16, 0xd6, 0x24, 0x92, 0xdd, 0x25, 0xb2,
        0x08, 0xed, 0xf8, 0x1b, 0x4a, 0xfb, 0x95, 0x14, 0xe9, 0x49, 0x0c, 0x15, 0x2d, 0x09, 0xf7,
        0x55, 0xc1, 0x54, 0x4b, 0x98, 0x70, 0xae, 0x1b, 0xa3, 0x4f, 0x92, 0x7f, 0x1a, 0xb3, 0x74,
        0xf8, 0xdb, 0xde, 0x26, 0x8e, 0x48, 0xdf, 0x1d, 0xac, 0xa4, 0x60, 0x8e, 0x7d, 0xe8, 0x61,
        0x9a, 0x86, 0x76, 0xf7, 0x06, 0x2a, 0xce, 0xb1, 0x3e, 0xac, 0xa4, 0x7a, 0xd5, 0x9c, 0xde,
        0x1e, 0x88, 0xa4, 0xe1, 0x70, 0x04, 0xcc, 0x54, 0x63, 0xb0, 0xb2, 0x75, 0xd4, 0x5a, 0x45,
        0xf8, 0x47, 0xdc, 0x5d, 0xbe, 0x12, 0xcc, 0xdb, 0xaf, 0x4d, 0x4c, 0xc1, 0x43, 0xeb, 0x41,
        0x1e, 0xeb, 0x1d, 0x83, 0x33, 0x88, 0xcc, 0x43, 0x7a, 0x7d, 0x22, 0x98, 0x8d, 0x33, 0xe4,
        0x2d, 0x27, 0x4e, 0x71, 0xfa, 0xa0, 0x19, 0x83, 0xf7, 0xa4, 0xa5, 0xd9, 0xeb, 0x70, 0x38,
        0x9a, 0x54, 0x22, 0xb1, 0x46, 0x47, 0x5f, 0x97, 0x1f, 0x74, 0x94, 0xad, 0x73, 0x74, 0x8e,
        0x65, 0xba, 0x54, 0xde, 0xe8, 0xd7, 0xe8, 0xcf, 0xe9, 0x37, 0xd0, 0x06, 0x53, 0xac, 0xc2,
        0x4b, 0x29, 0xaa, 0xc9, 0xde, 0xf7, 0xdf, 0x9b, 0x00, 0xbe, 0x02, 0x5f, 0xe9, 0x4f, 0xce,
        0x41, 0xda, 0xea, 0xaa, 0x51, 0x7b, 0xe6, 0xd9, 0x2a, 0x0a, 0x18, 0x7b, 0x5a, 0x6f, 0x35,
        0xa8, 0x32, 0xf8, 0x93, 0xbc, 0x04, 0x63, 0x7d, 0x77, 0x37, 0xc4, 0x22, 0x32, 0x70, 0xa2,
        0x07, 0x8b, 0x3e, 0x88, 0x5e, 0x02, 0x43, 0x0c, 0x97, 0x8f, 0xd5, 0x77, 0xc6, 0xe3, 0xc1,
        0x56, 0x3f, 0x0d, 0x18, 0xcc, 0x8b, 0x13, 0xc4, 0x6b, 0xb3, 0x50, 0xc0, 0x45, 0xf8, 0x8b,
        0xf1, 0x7c, 0xc0, 0xe4, 0x84, 0x2c, 0xf9, 0x20, 0x82, 0x23, 0xfe, 0x36, 0xb0, 0x7b, 0x8c,
        0x02, 0xcd, 0x2b, 0x27, 0x0b, 0x56, 0x16, 0x21, 0xb1, 0x3c, 0x06, 0x20, 0x3c, 0x69, 0x71,
        0xf9, 0x7f, 0xde, 0x97, 0x72, 0x6f, 0x20, 0x3c, 0x45, 0x68, 0x81, 0xea, 0xa1, 0xda, 0x67,
        0x92, 0x52, 0x75, 0x74, 0xc3, 0x08, 0xc1, 0xd8, 0x15, 0x90, 0x57, 0x74, 0x21, 0xda, 0x14,
        0xa9, 0xdd, 0xb2, 0x5c, 0x42, 0xb5, 0xcb, 0xb9, 0x6a, 0x7b, 0xd9, 0xf5, 0xb3, 0x7b, 0x02,
        0xfe, 0x4c, 0x3c, 0xf7, 0x0c, 0xea, 0x3d, 0x9a, 0x0e, 0x47, 0x0c, 0x26, 0x0c, 0x10, 0x41,
        0x3b, 0x1d, 0x99, 0x4a, 0x51, 0x2a, 0xb8, 0x9d, 0xaa, 0x1f, 0x54, 0x7b, 0xdb, 0x87, 0xd0,
        0x08, 0x39, 0xda, 0xce, 0x10, 0x35, 0xed, 0xb8, 0x3a, 0x06, 0x58, 0x9e, 0xfc, 0xc0, 0x06,
        0x69, 0xd3, 0x2f, 0xe4, 0x24, 0x0d, 0xc4, 0x9d, 0x1d, 0x2a, 0x25, 0xc7, 0x85, 0xb4, 0x46,
        0x05, 0x90, 0xd1, 0xce, 0x8f, 0x62, 0xe8, 0x52, 0x4d, 0xcf, 0x27, 0x59, 0x33, 0xff, 0x8d,
        0xe2, 0x59, 0x52, 0xa7, 0x62, 0x3a, 0x4e, 0x54, 0x9b, 0x93, 0x2b, 0x84, 0x7e, 0x89, 0xf6,
        0x97, 0x01, 0x1f, 0x6a, 0x1c, 0xfb, 0x06, 0x9c, 0xb3, 0xc9, 0xee, 0x4d, 0x21, 0x99, 0xb2,
        0xcf, 0xc5, 0x29, 0x37, 0x55, 0x31, 0x79, 0x51, 0x46, 0x1a, 0x89, 0x4d, 0x25, 0x47, 0xbb,
        0x66, 0x63, 0x6e, 0x7b, 0x4e, 0x6e, 0xe1, 0x09, 0xbc, 0x01, 0x58, 0x41, 0xfa, 0x51, 0x28,
        0xa9, 0xd7, 0xa3, 0xa4, 0x31, 0xeb, 0xcd, 0x32, 0x0c, 0x61, 0xd1, 0x77, 0x03, 0x9a, 0x71,
        0x06, 0x2f, 0x45, 0x50, 0xfc, 0x2d, 0x3c, 0x0a, 0x63, 0xde, 0x01, 0x18, 0x62, 0x6e, 0x5b,
        0x7d, 0xf4, 0x5c, 0xf7, 0x07, 0xdd, 0xfe, 0xd2, 0x83, 0x70, 0xc3, 0x8e, 0x53, 0x09, 0xee,
        0x65, 0x8e, 0x3f, 0xc8, 0xc5, 0x37, 0x9e, 0x33, 0x6f, 0xa9, 0xd3, 0x74, 0x92, 0x27, 0x6b,
        0x44, 0x17, 0xd9, 0xcd, 0x0e, 0x61, 0x14, 0xf1, 0xdb, 0x01, 0x59, 0x84, 0x56, 0x6c, 0x39,
        0xc7, 0x3e, 0xfe, 0x85, 0xf6, 0x55, 0xec, 0xb8, 0xae, 0xab, 0xd8, 0x79, 0x9b, 0xf5, 0x6c,
        0x58, 0x56, 0x23, 0x4e, 0xac, 0xa5, 0x2b, 0xc1, 0x1b, 0xa7, 0xb8, 0xfa, 0x2e, 0xf4, 0xcc,
        0x72, 0xa7, 0x78, 0xc7, 0x59, 0x15, 0x31, 0x22, 0xf4, 0x3a, 0x3c, 0xe7, 0xee, 0xa5, 0xf0,
        0xe6, 0xa3, 0xbb, 0x61, 0x8f, 0x1f, 0xd7, 0xb9, 0xb2, 0x4d, 0x59, 0x72, 0x81, 0x1f, 0x63,
        0x27, 0x59, 0xfd, 0x58, 0xa1, 0x3d, 0x54, 0x99, 0x0b, 0x35, 0x87, 0xec, 0x77, 0x98, 0xa0,
        0x49, 0xd2, 0x7c, 0x9b, 0xba, 0x64, 0xfe, 0x48, 0x13, 0xdc, 0xf7, 0xc9, 0x73, 0xbb, 0xf3,
        0x75, 0x47, 0xc2, 0x9c, 0x10, 0x00, 0x0d, 0x7f, 0xf8, 0xaf, 0x16, 0x99, 0x0e, 0x5a, 0x58,
        0xcd, 0x6b, 0x78, 0x80, 0x9f, 0x44, 0x73, 0x95, 0xb4, 0x2d, 0x04, 0x07, 0xa4, 0x45, 0x4e,
        0x71, 0xc4, 0xc0, 0x85, 0x81, 0x3d, 0x84, 0xb3, 0x09, 0x69, 0xdb, 0x9c, 0x13, 0xc5, 0xf6,
        0xdc, 0x58, 0xd5, 0x9e, 0x29, 0x54, 0x27, 0xf7, 0x21, 0x6b, 0x34, 0xea, 0xf8, 0x8a, 0x06,
        0x58, 0xbf, 0xb3, 0x48, 0xf7, 0x37, 0x16, 0x3d, 0xe7, 0xfe, 0x86, 0xb2, 0x4d, 0x86, 0x9d,
        0x1a, 0xd6, 0x2c, 0xc5, 0x4a, 0x8d, 0x78, 0x6a, 0x03, 0xbe, 0xa6, 0x0d, 0x93, 0xa3, 0x10,
        0x4e, 0x6e, 0x34, 0xf4, 0x40, 0x96, 0x73, 0x25, 0xe7, 0x14, 0x54, 0xcc, 0xb1, 0xb4, 0x38,
        0x68, 0xbe, 0x6d, 0x03, 0xfb, 0xb9, 0xd9, 0x2a, 0xc6, 0x04, 0xe8, 0x6e, 0x2d, 0x90, 0x06,
        0x90, 0x0a, 0x60, 0x8a, 0x4e, 0xd2, 0x91, 0x63, 0xa0, 0xdc, 0x82, 0x0d, 0x18, 0xb9, 0x94,
        0x60, 0xb1, 0x62, 0x7f, 0x07, 0x1f, 0x38, 0x7c, 0x2f, 0x63, 0x31, 0xfa, 0x23, 0xeb, 0x6e,
        0x8d, 0xe9, 0xaf, 0x44, 0x97, 0x8f, 0xf3, 0xa1, 0xf6, 0x9b, 0x1c, 0x57, 0x7e, 0x83, 0xf0,
        0x0a, 0xad, 0x3c, 0x90, 0xc0, 0x34, 0x42, 0x2c, 0x94, 0x46, 0x2c, 0x4c, 0x8a, 0xf9, 0x55,
        0xee, 0x84, 0x10, 0x61, 0xef, 0x17, 0x0b, 0xde, 0xec, 0x48, 0x69, 0x2e, 0xee, 0x94, 0xe5,
        0x57, 0xb9, 0x9e, 0xac, 0xfb, 0x13, 0xbc, 0x35, 0x3a, 0x61, 0x34, 0xb8, 0xf1, 0x58, 0x4a,
        0x4d, 0x74, 0xa9, 0xb7, 0xad, 0xd8, 0x05, 0x8e, 0x62, 0xa0, 0x57, 0x7b, 0xa7, 0xe2, 0xf8,
        0xcf, 0xa0, 0xad, 0xed, 0x5e, 0xe6, 0x6d, 0x29, 0xb2, 0x0d, 0xb4, 0x01, 0x15, 0xb4, 0x68,
        0x12, 0x52, 0xb0, 0x20, 0x37, 0x34, 0xe5, 0xf0, 0xa1, 0xd5, 0x31, 0xb3, 0x66, 0xa6, 0xe5,
        0x22, 0x1d, 0x06, 0xab, 0xbc, 0xd9, 0x2a, 0xa7, 0x31, 0x76, 0xea, 0x60, 0xec, 0x0f, 0xf4,
        0x0e, 0xec, 0x45, 0xc2, 0x6e, 0xb9, 0x8b, 0x84, 0xf8, 0x03, 0xed, 0x88, 0xfb, 0xc3, 0x39,
        0x9b, 0x4b, 0x7f, 0x16, 0x4e, 0x74, 0xed, 0x9d, 0xaa, 0xeb, 0xb0, 0xc5, 0xf9, 0xef, 0xda,
        0x7f, 0x9c, 0xb6, 0xcd, 0x5e, 0x2f, 0x56, 0x0f, 0xb6, 0xa7, 0xe3, 0x58, 0x20, 0x75, 0x88,
        0xdd, 0x55, 0x9e, 0x93, 0xd1, 0xe8, 0x1c, 0xb1, 0xc1, 0x4d, 0x69, 0x50, 0x09, 0x1e, 0x9b,
        0xd3, 0xc5, 0x14, 0xd7, 0xc1, 0x80, 0x64, 0x11, 0x2d, 0x37, 0x4a, 0xa6, 0xcf, 0x25, 0x2a,
        0xf0, 0xa7, 0x7e, 0xef, 0xb1, 0x8f, 0xda, 0xbc, 0xee, 0x6e, 0xc1, 0x4c, 0x96, 0x76, 0xdf,
        0xee, 0x66, 0x6d, 0xf0, 0x0b, 0x97, 0x0e, 0x63, 0x3c, 0x80, 0x2e, 0x0c, 0x17, 0xea, 0xbd,
        0x81, 0x4e, 0x21, 0x67, 0x69, 0x5b, 0x62, 0xed, 0xd2, 0x4c, 0x81, 0x1e, 0x30, 0xc9, 0xb3,
        0x53, 0x4f, 0xc1, 0xb2, 0x66, 0x60, 0xf1, 0xec, 0xf1, 0x43, 0x27, 0x05, 0x83, 0xef, 0xbd,
        0x0a, 0xbd, 0x5e, 0x3c, 0xde, 0x8e, 0x17, 0x29, 0xe3, 0xf3, 0x8e, 0xac, 0x1f, 0x62, 0xd3,
        0xb9, 0x98, 0x10, 0xd5, 0x6d, 0xd0, 0xb7, 0x44, 0x53, 0xb9, 0x61, 0xfc, 0x20, 0x96, 0x33,
        0x8a, 0xa5, 0x40, 0x28, 0x18, 0x5d, 0x6e, 0xac, 0x9c, 0xef, 0x58, 0x91, 0xb0, 0x20, 0xcc,
        0x94, 0xc2, 0x2c, 0x7b, 0xf2, 0x1a, 0x4d, 0x58, 0x7e, 0x21, 0x0b, 0xec, 0x60, 0x3d, 0x3b,
        0xe2, 0x29, 0xd4, 0x5a, 0x11, 0x6e, 0x22, 0x15, 0xf1, 0x07, 0xe9, 0xe7, 0x90, 0x8d, 0x27,
        0x85, 0x58, 0x0c, 0x8f, 0xf7, 0x07, 0x86, 0x1c, 0x7c, 0x25, 0x6b, 0x7f, 0x9f, 0x9b, 0xb1,
        0x96, 0x7d, 0xf3, 0x1b, 0x64, 0xd2, 0x6f, 0x99, 0xeb, 0x63, 0xc7, 0xae, 0xaf, 0x35, 0x4c,
        0x5f, 0xef, 0x8f, 0x32, 0x2d, 0x6e, 0x99, 0xfd, 0x30, 0xb0, 0x68, 0x35, 0x59, 0x8e, 0x4f,
        0xf4, 0xfe, 0x22, 0xf7, 0xa5, 0x52, 0xca, 0x9d, 0xf0, 0xd6, 0xe8, 0x81, 0x6a, 0x3e, 0x44,
        0x0d, 0xa2, 0x60, 0xe6, 0xcd, 0x23, 0x5a, 0x95, 0x73, 0xe9, 0xf8, 0xb8, 0x11, 0xea, 0x5c,
        0x66, 0x59, 0x14, 0x50, 0xe9, 0x09, 0x0c, 0x38, 0x52, 0x9d, 0x06, 0xf7, 0x08, 0xf1, 0x85,
        0xe3, 0x29, 0x18, 0x60, 0xbf, 0x63, 0x42, 0x5d, 0xbe, 0x35, 0xe9, 0xa2, 0x69, 0x63, 0xcb,
        0xbc, 0xad, 0x56, 0xcf, 0x5d, 0xf7, 0x47, 0x17, 0x1b, 0xd1, 0xd6, 0x56, 0x64, 0xaa, 0x9c,
        0xc3, 0xef, 0x67, 0x80, 0x7b, 0x31, 0x08, 0xcd, 0x99, 0x89, 0xf7, 0x0f, 0x90, 0x42, 0xcc,
        0x7a, 0x86, 0x58, 0x61, 0x48, 0x82, 0xc9, 0xf6, 0x96, 0x7e, 0xd7, 0x08, 0x37, 0x68, 0x5f,
        0x86, 0x1d, 0xd7, 0x93, 0xa6, 0xd3, 0x30, 0x38, 0x56, 0x0f, 0x0a, 0xd1, 0x74, 0x83, 0x64,
        0x9b, 0x43, 0x0b, 0x1a, 0xec, 0xf6, 0x21, 0x25, 0xc5, 0x7b, 0x7a, 0x58, 0x88, 0xd1, 0x20,
        0xee, 0x1c, 0x3d, 0x1d, 0x72, 0x5a, 0xf5, 0xa6, 0xbe, 0x63, 0x30, 0x99, 0x66, 0xac, 0xe4,
        0xeb, 0x02, 0x17, 0xb4, 0x10, 0x83, 0x0e, 0xd3, 0xa8, 0x94, 0xb5, 0xc3, 0xad, 0xb8, 0x5f,
        0xba, 0x74, 0xac, 0x93, 0x47, 0x79, 0x59, 0x8d, 0x06, 0x28, 0xe5, 0xd2, 0x37, 0xbf, 0xd1,
        0xb7, 0x9a, 0x41, 0x57, 0x31, 0x4a, 0x55, 0x3a, 0x06, 0xf8, 0xa4, 0x94, 0x26, 0x4c, 0xb4,
        0xc8, 0xa4, 0xae, 0xe3, 0xf9, 0xee, 0x38, 0xba, 0x22, 0xdc, 0x7d, 0xd4, 0x7c, 0x91, 0x2c,
        0x52, 0xe8, 0xec, 0x38, 0x1e, 0x26, 0x3d, 0x3f, 0x6a, 0xca, 0xa1, 0x75, 0xac, 0x68, 0x27,
        0x17, 0xc5, 0xf0, 0x97, 0x76, 0xee, 0xa4, 0x1c, 0xf2, 0x64, 0xca, 0x2a, 0x54, 0xc3, 0x88,
        0x4e, 0x44, 0xd7, 0x31, 0x90, 0xe5, 0x09, 0x1d, 0x8e, 0x5a, 0xba, 0xc8, 0x54, 0x31, 0x4f,
        0x6f, 0x25, 0xe9, 0xab, 0xe9, 0x83, 0xf4, 0xb3, 0xbd, 0xa9, 0x5c, 0x0e, 0x99, 0x36, 0xd1,
        0x4d, 0x89, 0xa7, 0x11, 0x0c, 0x19, 0x9f, 0x89, 0x73, 0x65, 0xa3, 0xbf, 0x0e, 0xc0, 0x7d,
        0x7e, 0x98, 0x8b, 0xcb, 0x1b, 0x60, 0xee, 0xbc, 0xa6, 0x24, 0x52, 0xcf, 0x09, 0xb9, 0xb7,
        0x2c, 0x63, 0x68, 0xe9, 0x7e, 0xf0, 0xcb, 0x36, 0x06, 0xeb, 0x04, 0x43, 0xca, 0x26, 0xd9,
        0xe7, 0xd1, 0xee, 0x50, 0x44, 0x29, 0x38, 0x70, 0xbd, 0x21, 0x4b, 0xf2, 0xf6, 0x9f, 0x00,
        0x9a, 0x19, 0x74, 0xc2, 0x06, 0xda, 0xfa, 0xf2, 0x7e, 0x7b, 0x79, 0xdd, 0x89, 0xd6, 0x2d,
        0x7d, 0x63, 0x41, 0x76, 0x67, 0x4c, 0x4a, 0x1e, 0xfb, 0xf3, 0x61, 0x31, 0x02, 0xb2, 0x1a,
        0xe0, 0xb6, 0xe5, 0xca, 0xfb, 0xeb, 0xe0, 0xc2, 0x13, 0xff, 0xc8, 0xb6, 0x76, 0xb0, 0x64,
        0xcd, 0xa4, 0xb1, 0x23, 0xe2, 0xef, 0xa2, 0x8f, 0xc9, 0x76, 0xa7, 0x20, 0xb7, 0x2f, 0x79,
        0x1e, 0xdf, 0xdd, 0xd3, 0x0c, 0x18, 0x8c, 0xf1, 0xe0, 0xd8, 0xf9, 0x20, 0x4a, 0x9b, 0x12,
        0x94, 0x92, 0x0f, 0xf9, 0x99, 0xe1, 0x8d, 0xf6, 0x71, 0x7f, 0xa0, 0xf0, 0x34, 0xd0, 0xfe,
        0x03, 0x83, 0xde, 0x60, 0x37, 0x90, 0x78, 0x0d, 0xe6, 0xa5, 0xf9, 0x58, 0x01, 0x52, 0x4a,
        0xa0, 0xc2, 0x44, 0x9e, 0x97, 0x73, 0x07, 0x72, 0xfb, 0xde, 0x4b, 0x39, 0x9f, 0xc8, 0x95,
        0x23, 0xb8, 0x02, 0xe8, 0x0b, 0x65, 0x14, 0x1f, 0xc0, 0x1e, 0xf0, 0xae, 0x86, 0x40, 0x9d,
        0x2e, 0x78, 0x78, 0xa2, 0xcb, 0xf6, 0x90, 0xf7, 0x6b, 0xb5, 0x73, 0x2b, 0xdd, 0xeb, 0x8f,
        0x44, 0x9d, 0x9b, 0x01, 0x80, 0xad, 0x9b, 0x94, 0x0c, 0x7e, 0x7e, 0x3d, 0x7f, 0xc4, 0x03,
        0x8d, 0x72, 0x90, 0xdf, 0x8b, 0xdd, 0x2e, 0x84, 0x0d, 0xbd, 0xe1, 0x4f, 0x68, 0xb4, 0xfe,
        0x8e, 0xcb, 0xd6, 0x1b, 0x7a, 0x44, 0x1f, 0xd9, 0x54, 0x77, 0x1f, 0xc4, 0xa4, 0x8f, 0xff,
        0xf7, 0x24, 0x2e, 0xaf, 0x3f, 0xfc, 0xcd, 0x08, 0x25, 0xb4, 0xa9, 0xc2, 0xcb, 0xb7, 0x79,
        0x51, 0x09, 0xee, 0x54, 0x12, 0xfe, 0xd6, 0x7b, 0xe6, 0xf3, 0xd4, 0x94, 0x63, 0x53, 0xd6,
        0x7d, 0x51, 0x6f, 0x1c, 0xd1, 0x6d, 0xc8, 0x71, 0x6e, 0x8d, 0x0d, 0xa7, 0x35, 0xe6, 0x2e,
        0xad, 0xf1, 0xc8, 0xa5, 0xe6, 0x4f, 0xc9, 0xdb, 0x5e, 0xa6, 0xb0, 0x35, 0x08, 0xca, 0xb3,
        0xf7, 0xd7, 0x17, 0x83, 0x5d, 0x61, 0x85, 0x91, 0x0f, 0x8c, 0x0a, 0x46, 0x16, 0x48, 0x1a,
        0x60, 0xbf, 0x86, 0x29, 0x57, 0x88, 0xdf, 0x37, 0xb4, 0xd4, 0x02, 0x9e, 0x31, 0x0a, 0x4c,
        0xde, 0xd3, 0x4d, 0x33, 0xff, 0xde, 0x8a, 0x3d, 0xa9, 0x08, 0x36, 0xc0, 0xcb, 0xf6, 0xf8,
        0xf8, 0x64, 0xb3, 0xd5, 0xf4, 0x59, 0xd4, 0x27, 0xe6, 0x0f, 0x97, 0xae, 0xe5, 0xc1, 0xe5,
        0xa9, 0xc1, 0x94, 0x0a, 0xb1, 0xad, 0x50, 0xea, 0xf1, 0x6c, 0xe6, 0x39, 0x28, 0x4e, 0xda,
        0xf7, 0xda, 0x27, 0xa7, 0xa3, 0x22, 0xb5, 0x92, 0xaa, 0xa4, 0x32, 0x6d, 0x5c, 0xa3, 0xe7,
        0x5f, 0x95, 0x13, 0x18, 0x54, 0x3a, 0x1f, 0xe9, 0x02, 0x3d, 0x7e, 0x8b, 0xb2, 0x28, 0xd0,
        0x7a, 0xa8, 0xc5, 0xd5, 0x19, 0xb2, 0x09, 0xab, 0x3f, 0x5f, 0xa9, 0x0b, 0xd7, 0xc3, 0xaf,
        0x4b, 0xd7, 0x57, 0xe5, 0xe5, 0xd4, 0x53, 0xf7, 0xfd, 0x79, 0xef, 0x3a, 0x5c, 0x7c, 0xaa,
        0x9c, 0x9d, 0xf5, 0x8b, 0x59, 0x86, 0x94, 0xb9, 0x3a, 0x2b, 0x6f, 0x7e, 0x5c, 0xad, 0xc7,
        0x41, 0x9f, 0x14, 0x72, 0x8f, 0x68, 0xbc, 0xb7, 0x43, 0x7c, 0x90, 0x29, 0xb9, 0xae, 0x5e,
        0x89, 0xdb, 0x5d, 0xb5, 0x5d, 0x38, 0x01, 0x34, 0x6e, 0x02, 0x11, 0x0d, 0x7f, 0xe4, 0x01,
        0x8c, 0x1e, 0xe8, 0xf4, 0x45, 0x63, 0xbe, 0x35, 0x12, 0xc7, 0x8e, 0xc9, 0x41, 0xb6, 0xd6,
        0xfd, 0xee, 0x8a, 0x35, 0x0f, 0x72, 0xd1, 0xe8, 0x59, 0x24, 0xe4, 0xac, 0xf1, 0xf0, 0x66,
        0xa9, 0xbc, 0x2b, 0x08, 0x43, 0xdd, 0xab, 0xb8, 0x3b, 0x1f, 0xea, 0xbd, 0xa1, 0x90, 0xb9,
        0xcb, 0x0f, 0xf3, 0x2f, 0xbb, 0x37, 0xc4, 0x82, 0x71, 0xc7, 0x4c, 0x0b, 0xe6, 0x8a, 0x8c,
        0xda, 0x7b, 0x83, 0x16, 0x3c, 0x7f, 0xb1, 0x26, 0xfe, 0x5f, 0xee, 0xa1, 0x39, 0xc9, 0x95,
        0x21, 0x2b, 0x50, 0x1f, 0x08, 0x0c, 0x49, 0x69, 0xf3, 0x71, 0xd0, 0x37, 0x43, 0xba, 0xce,
        0x11, 0x64, 0x5f, 0xfd, 0xf3, 0xc4, 0xce, 0x76, 0x2e, 0xec, 0xc7, 0x55, 0x1a, 0xbe, 0xa8,
        0x47, 0xdc, 0xe7, 0xec, 0xec, 0x19, 0x3a, 0x81,
    };
    constexpr std::array<uint8_t, test_vectors * depth * SECURITY_PARAM / 8> pdec_j{
        0x0e, 0xbc, 0xb5, 0xde, 0xb5, 0x2c, 0x83, 0xbd, 0x08, 0xa8, 0xa9, 0x35, 0x18, 0x2c, 0x91,
        0x99, 0xd2, 0x43, 0x56, 0x53, 0x28, 0x81, 0x60, 0x2f, 0x80, 0x9e, 0xb3, 0x83, 0xc5, 0xff,
        0x5d, 0x56, 0x97, 0x20, 0xe4, 0x05, 0x16, 0x40, 0x7d, 0x2c, 0x24, 0x9a, 0x9b, 0x75, 0x6a,
        0x46, 0xf7, 0x1a, 0x80, 0xde, 0x90, 0x97, 0x11, 0xcf, 0xa3, 0x0b, 0xcd, 0x15, 0x1f, 0xce,
        0x14, 0x4c, 0x5d, 0x56, 0x2d, 0x67, 0xc6, 0x55, 0x70, 0x4e, 0x03, 0x51, 0xa1, 0xaa, 0xa2,
        0x39, 0x84, 0x0d, 0x11, 0x8d, 0xa6, 0x92, 0x77, 0x4c, 0x01, 0x73, 0xfa, 0x2d, 0xa1, 0x54,
        0xa9, 0xca, 0x06, 0xe7, 0xfd, 0x53, 0xb1, 0xef, 0x89, 0x3e, 0xe8, 0x4d, 0x11, 0xa7, 0x1e,
        0x32, 0xf9, 0xe8, 0x0b, 0x10, 0xae, 0x48, 0xee, 0x5d, 0x03, 0x9e, 0x90, 0xf0, 0x26, 0x3a,
        0xf7, 0x88, 0xf8, 0xbb, 0x21, 0x00, 0x57, 0x20, 0x25, 0xa7, 0x1d, 0xe0, 0xad, 0xac, 0x15,
        0x9e, 0x48, 0xfc, 0xbd, 0xb3, 0x72, 0xfc, 0xa3, 0x14, 0x1c, 0xba, 0x1e, 0xe7, 0x8a, 0x57,
        0xb5, 0x62, 0xce, 0xd2, 0x27, 0xaf, 0x0e, 0xa6, 0x86, 0xd1, 0x0e, 0xbc, 0xb5, 0xde, 0xb5,
        0x2c, 0x83, 0xbd, 0x08, 0xa8, 0xa9, 0x35, 0x18, 0x2c, 0x91, 0x99, 0xd2, 0x43, 0x56, 0x53,
        0x28, 0x81, 0x60, 0x2f, 0x80, 0x9e, 0xb3, 0x83, 0xc5, 0xff, 0x5d, 0x56, 0x97, 0x20, 0xe4,
        0x05, 0x16, 0x40, 0x7d, 0x2c, 0x24, 0x9a, 0x9b, 0x75, 0x6a, 0x46, 0xf7, 0x1a, 0x80, 0xde,
        0x90, 0x97, 0x11, 0xcf, 0xa3, 0x0b, 0xcd, 0x15, 0x1f, 0xce, 0x14, 0x4c, 0x5d, 0x56, 0x2d,
        0x67, 0xc6, 0x55, 0x70, 0x4e, 0x03, 0x51, 0xa1, 0xaa, 0xa2, 0x39, 0x84, 0x0d, 0x11, 0x8d,
        0xa6, 0x92, 0x77, 0x4c, 0x01, 0x73, 0xfa, 0x2d, 0xa1, 0x54, 0xa9, 0xca, 0x06, 0xe7, 0xfd,
        0x53, 0xb1, 0xef, 0x89, 0x3e, 0xe8, 0x4d, 0x11, 0xa7, 0x1e, 0x32, 0xf9, 0xe8, 0x0b, 0x10,
        0xae, 0x48, 0xee, 0x5d, 0x03, 0x9e, 0x90, 0xf0, 0x26, 0x3a, 0xf7, 0x88, 0xf8, 0xbb, 0x21,
        0x00, 0x57, 0x20, 0x2c, 0x81, 0x36, 0x09, 0xc1, 0xad, 0x8a, 0x5f, 0xfb, 0x98, 0xa2, 0x57,
        0x43, 0x42, 0xe1, 0x5a, 0x8f, 0xfd, 0x4d, 0x94, 0x18, 0x3d, 0xce, 0x6b, 0xc3, 0xed, 0xd4,
        0x8b, 0x35, 0x25, 0xa2, 0x6a, 0x0e, 0xbc, 0xb5, 0xde, 0xb5, 0x2c, 0x83, 0xbd, 0x08, 0xa8,
        0xa9, 0x35, 0x18, 0x2c, 0x91, 0x99, 0xd2, 0x43, 0x56, 0x53, 0x28, 0x81, 0x60, 0x2f, 0x80,
        0x9e, 0xb3, 0x83, 0xc5, 0xff, 0x5d, 0x56, 0x97, 0x20, 0xe4, 0x05, 0x16, 0x40, 0x7d, 0x2c,
        0x24, 0x9a, 0x9b, 0x75, 0x6a, 0x46, 0xf7, 0x1a, 0x80, 0xde, 0x90, 0x97, 0x11, 0xcf, 0xa3,
        0x0b, 0xcd, 0x15, 0x1f, 0xce, 0x14, 0x4c, 0x5d, 0x56, 0x2d, 0x67, 0xc6, 0x55, 0x70, 0x4e,
        0x03, 0x51, 0xa1, 0xaa, 0xa2, 0x39, 0x84, 0x0d, 0x11, 0x8d, 0xa6, 0x92, 0x77, 0x4c, 0x01,
        0x73, 0xfa, 0x2d, 0xa1, 0x54, 0xa9, 0xca, 0x06, 0xe7, 0xfd, 0x53, 0x4b, 0x26, 0x31, 0x94,
        0x1b, 0x2d, 0x28, 0x72, 0xbe, 0xea, 0x0f, 0x55, 0x86, 0xfa, 0x76, 0x12, 0x25, 0x42, 0xa6,
        0xc0, 0xb4, 0xfd, 0x0a, 0xee, 0xef, 0x49, 0x49, 0xa4, 0xb0, 0x6a, 0x9e, 0x4a, 0xbc, 0x0e,
        0xfd, 0xb0, 0x0f, 0x7b, 0xa4, 0x12, 0xc6, 0x72, 0xc7, 0xa2, 0x8a, 0x6e, 0x82, 0x44, 0xf5,
        0xc4, 0x82, 0xfd, 0x34, 0x61, 0x5c, 0xdd, 0xf1, 0xfb, 0xcd, 0x9d, 0x49, 0x8e, 0x59, 0xde,
        0x0e, 0xbc, 0xb5, 0xde, 0xb5, 0x2c, 0x83, 0xbd, 0x08, 0xa8, 0xa9, 0x35, 0x18, 0x2c, 0x91,
        0x99, 0xd2, 0x43, 0x56, 0x53, 0x28, 0x81, 0x60, 0x2f, 0x80, 0x9e, 0xb3, 0x83, 0xc5, 0xff,
        0x5d, 0x56, 0x97, 0x20, 0xe4, 0x05, 0x16, 0x40, 0x7d, 0x2c, 0x24, 0x9a, 0x9b, 0x75, 0x6a,
        0x46, 0xf7, 0x1a, 0x80, 0xde, 0x90, 0x97, 0x11, 0xcf, 0xa3, 0x0b, 0xcd, 0x15, 0x1f, 0xce,
        0x14, 0x4c, 0x5d, 0x56, 0x2d, 0x67, 0xc6, 0x55, 0x70, 0x4e, 0x03, 0x51, 0xa1, 0xaa, 0xa2,
        0x39, 0x84, 0x0d, 0x11, 0x8d, 0xa6, 0x92, 0x77, 0x4c, 0x01, 0x73, 0xfa, 0x2d, 0xa1, 0x54,
        0xa9, 0xca, 0x06, 0xe7, 0xfd, 0x53, 0x4b, 0x26, 0x31, 0x94, 0x1b, 0x2d, 0x28, 0x72, 0xbe,
        0xea, 0x0f, 0x55, 0x86, 0xfa, 0x76, 0x12, 0x25, 0x42, 0xa6, 0xc0, 0xb4, 0xfd, 0x0a, 0xee,
        0xef, 0x49, 0x49, 0xa4, 0xb0, 0x6a, 0x9e, 0x4a, 0x9a, 0x1b, 0x79, 0x51, 0x28, 0x6b, 0x40,
        0x61, 0xc2, 0x70, 0x7b, 0x80, 0x73, 0x42, 0x99, 0xa7, 0x41, 0x93, 0x04, 0x1b, 0x3c, 0x32,
        0x39, 0x7d, 0x22, 0x4e, 0x7b, 0xc0, 0x76, 0x18, 0x64, 0xbd,
    };
    constexpr std::array<uint8_t, test_vectors * SECURITY_PARAM / 8 * 2> com_j{
        0x5c, 0x3d, 0xc2, 0x4c, 0x9f, 0x91, 0xba, 0x49, 0x21, 0xdd, 0x60, 0x7b, 0xf4, 0xba, 0x26,
        0xa0, 0x5c, 0x8d, 0xf5, 0xe4, 0xff, 0x5e, 0xfa, 0x7f, 0x8c, 0xbf, 0xf5, 0x6d, 0x25, 0xaf,
        0xc8, 0x85, 0x14, 0xdd, 0xc3, 0xe9, 0x02, 0xf6, 0x16, 0xd6, 0x24, 0x92, 0xdd, 0x25, 0xb2,
        0x08, 0xed, 0xf8, 0x1b, 0x4a, 0xfb, 0x95, 0x14, 0xe9, 0x49, 0x0c, 0x15, 0x2d, 0x09, 0xf7,
        0x55, 0xc1, 0x54, 0x4b, 0x98, 0x70, 0xae, 0x1b, 0xa3, 0x4f, 0x92, 0x7f, 0x1a, 0xb3, 0x74,
        0xf8, 0xdb, 0xde, 0x26, 0x8e, 0x48, 0xdf, 0x1d, 0xac, 0xa4, 0x60, 0x8e, 0x7d, 0xe8, 0x61,
        0x9a, 0x86, 0x76, 0xf7, 0x06, 0x2a, 0xce, 0xb1, 0x3e, 0xac, 0xa4, 0x7a, 0xd5, 0x9c, 0xde,
        0x1e, 0x88, 0xa4, 0xe1, 0x70, 0x04, 0xcc, 0x54, 0x63, 0xb0, 0xb2, 0x75, 0xd4, 0x5a, 0x45,
        0xf8, 0x47, 0xdc, 0x5d, 0xbe, 0x12, 0xcc, 0xdb, 0xaf, 0x4d, 0x4c, 0xc1, 0x43, 0xeb, 0x41,
        0x1e, 0xeb, 0x1d, 0x83, 0x33, 0x88, 0xcc, 0x43, 0x7a, 0x7d, 0x22, 0x98, 0x8d, 0x33, 0xe4,
        0x2d, 0x27, 0x4e, 0x71, 0xfa, 0xa0, 0x19, 0x83, 0xf7, 0xa4, 0xa5, 0xd9, 0xeb, 0x70, 0x38,
        0x9a, 0x54, 0x22, 0xb1, 0x46, 0x47, 0x5f, 0x97, 0x1f, 0x74, 0x94, 0xad, 0x73, 0x74, 0x8e,
        0x65, 0xba, 0x54, 0xde, 0xe8, 0xd7, 0xe8, 0xcf, 0xe9, 0x37, 0xd0, 0x06, 0x53, 0xac, 0xc2,
        0x4b, 0x29, 0xaa, 0xc9, 0xde, 0xf7, 0xdf, 0x9b, 0x00, 0xbe, 0x02, 0x5f, 0xe9, 0x4f, 0xce,
        0x41, 0xda, 0xea, 0xaa, 0x51, 0x7b, 0xe6, 0xd9, 0x2a, 0x0a, 0x18, 0x7b, 0x5a, 0x6f, 0x35,
        0xa8, 0x32, 0xf8, 0x93, 0xbc, 0x04, 0x63, 0x7d, 0x77, 0x37, 0xc4, 0x22, 0x32, 0x70, 0xa2,
        0x07, 0x8b, 0x3e, 0x88, 0x5e, 0x02, 0x43, 0x0c, 0x97, 0x8f, 0xd5, 0x77, 0xc6, 0xe3, 0xc1,
        0x56,
    };
}

#endif

#if defined(TREE_PRG_AES_CTR) && defined(LEAF_PRG_SHAKE) && (((SECURITY_PARAM == 128) && (BITS_PER_WITNESS == 32)) || ((SECURITY_PARAM == 192) && (BITS_PER_WITNESS == 48)) || ((SECURITY_PARAM == 256) && (BITS_PER_WITNESS == 52)))

TEST_CASE( "compare against tv", "[vector com]" ) {
    INFO( "SECURITY_PARAM = " << SECURITY_PARAM );
#if SECURITY_PARAM == 128
    const size_t tv_num = tv128::test_vectors;
    const uint8_t* tv_root_key = tv128::root_key.data();
    const auto& tv_com = tv128::com;
    const size_t tv_com_size = tv128::com.size();
    const uint8_t* tv_com_j = tv128::com_j.data();
    const uint8_t* tv_pdec_j = tv128::pdec_j.data();
    const size_t tv_pdec_j_size = tv128::pdec_j.size();
#elif SECURITY_PARAM == 192
    const size_t tv_num = tv192::test_vectors;
    const uint8_t* tv_root_key = tv192::root_key.data();
    const auto& tv_com = tv192::com;
    const size_t tv_com_size = tv192::com.size();
    const uint8_t* tv_com_j = tv192::com_j.data();
    const uint8_t* tv_pdec_j = tv192::pdec_j.data();
    const size_t tv_pdec_j_size = tv192::pdec_j.size();
#elif SECURITY_PARAM == 256
    const size_t tv_num = tv256::test_vectors;
    const uint8_t* tv_root_key = tv256::root_key.data();
    const auto& tv_com = tv256::com;
    const size_t tv_com_size = tv256::com.size();
    const uint8_t* tv_com_j = tv256::com_j.data();
    const uint8_t* tv_pdec_j = tv256::pdec_j.data();
    const size_t tv_pdec_j_size = tv256::pdec_j.size();
#endif

    std::vector<block_secpar> roots(BITS_PER_WITNESS);
    std::vector<block_secpar> forest(VECTOR_COMMIT_NODES);
    std::vector<block_secpar> leaves_sender(VECTOR_COMMIT_LEAVES);
    std::vector<block_secpar> leaves_receiver(VECTOR_COMMIT_LEAVES);
    std::vector<block_2secpar> hashed_leaves_sender(VECTOR_COMMIT_LEAVES);
    std::vector<block_2secpar> hashed_leaves_receiver(VECTOR_COMMIT_LEAVES);
    std::vector<uint8_t> delta_bytes(SECURITY_PARAM, 0);
    std::vector<uint8_t> opening(VECTOR_OPEN_SIZE);

    // init fixed keys
	block_secpar fixed_key_iv = block_secpar_set_zero();
	prg_tree_fixed_key fixed_key_tree;
	prg_leaf_fixed_key fixed_key_leaf;
	init_fixed_keys(&fixed_key_tree, &fixed_key_leaf, fixed_key_iv);

    // init roots (first from tv, other zero)
    memcpy(&roots[0], tv_root_key, SECURITY_PARAM / 8);
    for (size_t i = 1; i < BITS_PER_WITNESS; ++i) {
        roots[i] = block_secpar_set_zero();
    }

    // commit
    REQUIRE( tv_com_size == ((1 << VOLE_MAX_K) * sizeof(block_2secpar)) );
    vector_commit_from_roots(roots.data(), forest.data(), leaves_sender.data(),
                             hashed_leaves_sender.data(), &fixed_key_tree, &fixed_key_leaf);
    // check the hashed leaves
    {
        std::array<uint8_t, 2 * SECURITY_PARAM / 8 * (1 << VOLE_MAX_K)> hashed_leaves_vec;
        memcpy(hashed_leaves_vec.data(), hashed_leaves_sender.data(), hashed_leaves_vec.size());
        CHECK( hashed_leaves_vec == tv_com );
    }


    for (size_t delta = 0; delta < tv_num; ++delta) {
        INFO( "delta = " << delta );
        assert(delta < (1 << VOLE_MIN_K));
        for (size_t i = 0, dst = 0; i < BITS_PER_WITNESS; ++i)
        {
            size_t k = i < VOLES_MAX_K ? VOLE_MAX_K : VOLE_MIN_K;
            expand_bits_to_bytes(&delta_bytes[dst], k, delta);
            dst += k;
        }

        vector_open(forest.data(), hashed_leaves_sender.data(), delta_bytes.data(), opening.data());
        // check the opening
        {
            const size_t PATH_SIZE = SECURITY_PARAM / 8 * VOLE_MAX_K;
            const size_t HASH_SIZE = 2 * SECURITY_PARAM / 8;
            REQUIRE( (PATH_SIZE * tv_num) == tv_pdec_j_size );
            std::array<uint8_t, PATH_SIZE> path_vec;
            std::array<uint8_t, PATH_SIZE> tv_path_vec;
            memcpy(path_vec.data(), opening.data(), PATH_SIZE);
            memcpy(tv_path_vec.data(), tv_pdec_j + delta * PATH_SIZE, PATH_SIZE);
            CHECK( path_vec == tv_path_vec );
            std::array<uint8_t, HASH_SIZE> hash_vec;
            std::array<uint8_t, HASH_SIZE> tv_hash_vec;
            memcpy(hash_vec.data(), opening.data() + PATH_SIZE, HASH_SIZE);
            memcpy(tv_hash_vec.data(), tv_com_j + delta * HASH_SIZE, HASH_SIZE);
            CHECK( hash_vec == tv_hash_vec );
        }

        /// verifying the opening
        vector_verify(opening.data(), delta_bytes.data(), leaves_receiver.data(), hashed_leaves_receiver.data());

        const auto hashed_leaves_sender_bytes = std::vector(reinterpret_cast<arr_2secpar*>(hashed_leaves_sender.data()),
                                                            reinterpret_cast<arr_2secpar*>(hashed_leaves_sender.data() + hashed_leaves_sender.size()));
        const auto hashed_leaves_receiver_bytes = std::vector(reinterpret_cast<arr_2secpar*>(hashed_leaves_receiver.data()),
                                                              reinterpret_cast<arr_2secpar*>(hashed_leaves_receiver.data() + hashed_leaves_receiver.size()));
        REQUIRE( hashed_leaves_receiver_bytes == hashed_leaves_sender_bytes );
    }

    // vector_verify(opening.data(), delta_bytes.data(), leaves_receiver.data(), hashed_leaves_receiver.data());
}

#endif
