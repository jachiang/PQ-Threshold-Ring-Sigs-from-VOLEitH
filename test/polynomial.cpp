#include <array>
#include <ostream>
#include <sstream>
#include <ios>

extern "C" {

#include "polynomials.h"

}

#include "test.hpp"
#include "catch_amalgamated.hpp"

const size_t TEST_VEC_LEN = 16;

const std::array<uint8_t, 8 * TEST_VEC_LEN> enc_poly64_vec_xs = {
    0x3c, 0x7e, 0x08, 0x15, 0x7b, 0x5b, 0xad, 0x5b, 0xc8, 0x3b, 0xc0, 0x21, 0x35, 0x17, 0x11, 0x11,
    0xb8, 0x75, 0xed, 0x42, 0xa0, 0x59, 0x54, 0x03, 0x8e, 0xb4, 0x13, 0xb8, 0xc3, 0xe5, 0x80, 0x63,
    0x36, 0x9a, 0x5e, 0x03, 0xc1, 0x3b, 0x13, 0x0e, 0x7c, 0x7a, 0xbe, 0x4f, 0xc6, 0x3d, 0x5b, 0x3f,
    0xd0, 0x66, 0x9c, 0xf7, 0x8c, 0x27, 0xd3, 0x57, 0x5c, 0xbe, 0x78, 0x8e, 0xb1, 0x32, 0x08, 0x1f,
    0xc1, 0x32, 0xc1, 0xd8, 0xa2, 0x79, 0x9c, 0x02, 0x32, 0x3a, 0xb5, 0x56, 0x8c, 0x8c, 0x17, 0x90,
    0xa7, 0xe3, 0x6a, 0x51, 0x07, 0xc2, 0xea, 0xd4, 0x5d, 0x40, 0x52, 0x37, 0x0f, 0x9c, 0xd5, 0x9e,
    0xae, 0x08, 0x81, 0x24, 0x40, 0x0d, 0x65, 0x9c, 0x7e, 0xc2, 0xca, 0xe6, 0x30, 0x5a, 0x24, 0x86,
    0xa0, 0x30, 0x10, 0xc7, 0x02, 0xc2, 0x0b, 0x8b, 0xbf, 0xac, 0x6a, 0x32, 0x6e, 0x5e, 0x14, 0xa4,
};
const std::array<uint8_t, 8 * TEST_VEC_LEN> enc_poly64_vec_ys = {
    0x10, 0xa6, 0xfc, 0x5d, 0x59, 0xda, 0x47, 0xbd, 0x20, 0x89, 0x53, 0xc2, 0x86, 0xf7, 0xde, 0x36,
    0x6c, 0x56, 0x3f, 0x34, 0xb5, 0x07, 0xa0, 0xd0, 0xa9, 0x23, 0xed, 0xab, 0x43, 0x64, 0x31, 0xbd,
    0x1c, 0xa7, 0x4f, 0x9b, 0xbb, 0x13, 0x04, 0xfb, 0x69, 0x74, 0xa1, 0x42, 0x98, 0x56, 0x92, 0x23,
    0x14, 0x76, 0xbc, 0x0f, 0xa8, 0xe4, 0x68, 0x78, 0x04, 0x7b, 0xb3, 0xb7, 0x19, 0x02, 0xad, 0xd7,
    0x9b, 0x44, 0x18, 0xcd, 0xa7, 0xe2, 0x07, 0x24, 0x95, 0x68, 0x7e, 0x10, 0x0f, 0xf3, 0x9c, 0x47,
    0x9c, 0xe2, 0xfc, 0x66, 0x1b, 0xfb, 0x38, 0x70, 0xea, 0x7e, 0xbd, 0x18, 0xb1, 0x7e, 0xac, 0xd1,
    0x50, 0x6f, 0xca, 0x6f, 0xf9, 0xee, 0x21, 0x20, 0x79, 0xe3, 0x27, 0x79, 0xcb, 0x18, 0xb4, 0x86,
    0xb9, 0x89, 0x98, 0xeb, 0x8d, 0xa1, 0x8a, 0x9c, 0x64, 0xfb, 0x28, 0xa2, 0x08, 0x3a, 0x44, 0x7a,
};
const std::array<uint8_t, 8 * TEST_VEC_LEN> enc_poly64_vec_sums = {
    0x2c, 0xd8, 0xf4, 0x48, 0x22, 0x81, 0xea, 0xe6, 0xe8, 0xb2, 0x93, 0xe3, 0xb3, 0xe0, 0xcf, 0x27,
    0xd4, 0x23, 0xd2, 0x76, 0x15, 0x5e, 0xf4, 0xd3, 0x27, 0x97, 0xfe, 0x13, 0x80, 0x81, 0xb1, 0xde,
    0x2a, 0x3d, 0x11, 0x98, 0x7a, 0x28, 0x17, 0xf5, 0x15, 0x0e, 0x1f, 0x0d, 0x5e, 0x6b, 0xc9, 0x1c,
    0xc4, 0x10, 0x20, 0xf8, 0x24, 0xc3, 0xbb, 0x2f, 0x58, 0xc5, 0xcb, 0x39, 0xa8, 0x30, 0xa5, 0xc8,
    0x5a, 0x76, 0xd9, 0x15, 0x05, 0x9b, 0x9b, 0x26, 0xa7, 0x52, 0xcb, 0x46, 0x83, 0x7f, 0x8b, 0xd7,
    0x3b, 0x01, 0x96, 0x37, 0x1c, 0x39, 0xd2, 0xa4, 0xb7, 0x3e, 0xef, 0x2f, 0xbe, 0xe2, 0x79, 0x4f,
    0xfe, 0x67, 0x4b, 0x4b, 0xb9, 0xe3, 0x44, 0xbc, 0x07, 0x21, 0xed, 0x9f, 0xfb, 0x42, 0x90, 0x00,
    0x19, 0xb9, 0x88, 0x2c, 0x8f, 0x63, 0x81, 0x17, 0xdb, 0x57, 0x42, 0x90, 0x66, 0x64, 0x50, 0xde,
};
const std::array<uint8_t, 2 * 8 * TEST_VEC_LEN> enc_poly64_vec_unreduced_products = {
    0xc0, 0xeb, 0x0a, 0x01, 0x27, 0xc7, 0x97, 0xa7, 0x09, 0x5a, 0x4a, 0x91, 0x60, 0xf4, 0xe6, 0x20,
    0x00, 0xf1, 0xde, 0x76, 0xf7, 0xf3, 0x1d, 0xaa, 0xbe, 0x0d, 0xdc, 0xcf, 0x56, 0x69, 0x58, 0x03,
    0x20, 0xb2, 0x4d, 0x76, 0xf2, 0xfd, 0x8d, 0x45, 0xdf, 0xe9, 0xf3, 0x87, 0x8c, 0xbf, 0x4b, 0x01,
    0x3e, 0x94, 0xe8, 0x24, 0x83, 0xb5, 0xfe, 0x47, 0x2e, 0xe0, 0x55, 0x1d, 0xcd, 0xda, 0x73, 0x39,
    0x08, 0x58, 0x4e, 0x35, 0x96, 0xa6, 0xe2, 0x3b, 0xbd, 0xf4, 0x21, 0x1c, 0xff, 0x93, 0xcc, 0x05,
    0x1c, 0xc9, 0x7e, 0x96, 0x74, 0x3a, 0xa4, 0x3a, 0x37, 0x0e, 0x8d, 0xcc, 0xd8, 0xa0, 0xb6, 0x07,
    0x40, 0x16, 0x22, 0x7f, 0xcd, 0x74, 0x80, 0xf5, 0x98, 0xcc, 0x0f, 0xf9, 0xf9, 0x83, 0xd0, 0x18,
    0x70, 0xbd, 0xcf, 0xd0, 0x9c, 0xe1, 0xb6, 0xcb, 0x7f, 0x5d, 0x89, 0xc1, 0x0b, 0x50, 0xe7, 0x09,
    0xdb, 0xc9, 0xa3, 0xbc, 0xa1, 0xa4, 0x76, 0x12, 0x15, 0x74, 0xfa, 0x38, 0xb9, 0xf2, 0x59, 0x00,
    0xda, 0x38, 0x68, 0x79, 0x9d, 0x0d, 0xbf, 0xf5, 0x44, 0x11, 0xfb, 0x85, 0x62, 0x39, 0xb2, 0x27,
    0x54, 0x94, 0xde, 0x38, 0x28, 0x21, 0x81, 0xfa, 0x64, 0xe6, 0xa5, 0xce, 0x0f, 0x7f, 0xf8, 0x22,
    0x32, 0xa6, 0x65, 0x9b, 0xfa, 0x78, 0xc4, 0x3b, 0x6b, 0x3a, 0x54, 0xae, 0xb8, 0x22, 0xf6, 0x61,
    0x60, 0xdb, 0xbe, 0xd6, 0x92, 0xd3, 0x5d, 0xee, 0xfc, 0xd2, 0x7f, 0x9e, 0x16, 0xcc, 0x9f, 0x13,
    0x2e, 0xe4, 0xcb, 0x2f, 0x41, 0xb1, 0x8f, 0x72, 0xb6, 0x4d, 0x1d, 0x3e, 0x82, 0x54, 0x5f, 0x40,
    0xa0, 0x5b, 0x69, 0x52, 0x76, 0x21, 0xd8, 0xc8, 0xef, 0x01, 0x1f, 0x5c, 0xbd, 0xb3, 0x01, 0x4b,
    0xdc, 0x63, 0xf0, 0x1a, 0x9a, 0xa7, 0xf9, 0x65, 0xf3, 0xb3, 0x25, 0xc5, 0x17, 0xdc, 0x85, 0x33,
};
const std::array<uint8_t, 8 * TEST_VEC_LEN> enc_poly64_vec_products = {
    0x2e, 0x75, 0x23, 0x2c, 0x8b, 0x3e, 0xe4, 0xcf, 0xd2, 0x51, 0x9a, 0xa5, 0xd6, 0x97, 0xb0, 0x80,
    0x49, 0x5b, 0xf8, 0xbe, 0xcb, 0x39, 0xb7, 0x58, 0xea, 0xb7, 0xe7, 0x3c, 0x6d, 0xa0, 0xc9, 0x50,
    0xf7, 0xab, 0x3c, 0x32, 0x9e, 0xb2, 0x1a, 0x47, 0x8d, 0x49, 0x51, 0x6f, 0x57, 0xd0, 0xa0, 0x74,
    0xb3, 0xee, 0xb0, 0x2c, 0x97, 0xd0, 0x7d, 0x97, 0xf9, 0x66, 0x8b, 0x86, 0x62, 0x91, 0xd0, 0x00,
    0x1c, 0xb4, 0xd9, 0xbd, 0x30, 0x0d, 0xcc, 0x15, 0x5b, 0x95, 0x0c, 0x87, 0x06, 0x1b, 0xdb, 0xdb,
    0xb5, 0xeb, 0x41, 0xf4, 0xba, 0xa8, 0xcd, 0xa5, 0x10, 0x9d, 0x7b, 0xfe, 0x7c, 0x21, 0x0d, 0x89,
    0x5f, 0x14, 0x3d, 0x60, 0x74, 0x26, 0xff, 0x7f, 0x7e, 0x84, 0xd2, 0x7c, 0xf5, 0xa0, 0x61, 0xb5,
    0x43, 0x48, 0x40, 0x97, 0x8e, 0x53, 0xcc, 0xfd, 0x57, 0x17, 0xe8, 0x2e, 0x60, 0xe2, 0x04, 0x95,
};

const std::array<uint8_t, 16 * TEST_VEC_LEN> enc_poly128_vec_xs = {
    0x7c, 0x5f, 0x30, 0xf4, 0xb7, 0xe9, 0xd3, 0xde, 0x16, 0x90, 0x11, 0xbc, 0x1e, 0x35, 0xd6, 0xde,
    0xf5, 0xab, 0x75, 0xd2, 0x96, 0x23, 0x07, 0xfc, 0x53, 0xaf, 0xef, 0x14, 0x7d, 0x7c, 0x8f, 0xcc,
    0xff, 0xc4, 0x29, 0x00, 0xfb, 0x94, 0x24, 0x80, 0x7f, 0x8b, 0x52, 0x9f, 0xf3, 0x3c, 0xf5, 0xd9,
    0x5f, 0xca, 0x80, 0x4f, 0x18, 0xd5, 0x1c, 0x38, 0xa5, 0x08, 0x4b, 0x30, 0xfc, 0x10, 0xb3, 0x73,
    0x4d, 0x28, 0xdd, 0x65, 0xb4, 0x2f, 0x82, 0x45, 0x55, 0xc1, 0x00, 0x1d, 0x5c, 0xed, 0xef, 0xf7,
    0x85, 0xe6, 0x01, 0xb2, 0x8f, 0xc4, 0x0a, 0x40, 0x14, 0xd1, 0xf6, 0xdd, 0xb2, 0x46, 0x44, 0x95,
    0x42, 0xf3, 0x06, 0x4d, 0x96, 0x89, 0xfd, 0x53, 0xf6, 0x33, 0xda, 0x8c, 0x28, 0xd6, 0x81, 0xd1,
    0x89, 0x4f, 0x92, 0x8f, 0xfe, 0x82, 0xa8, 0x83, 0xc9, 0xb7, 0xa8, 0xd3, 0x91, 0x52, 0x72, 0x8d,
    0xf4, 0x9d, 0xff, 0xbc, 0x34, 0x34, 0x06, 0x80, 0x2e, 0x49, 0x47, 0x51, 0xa0, 0xb8, 0xd8, 0x8f,
    0x77, 0x15, 0xc8, 0x78, 0x2b, 0xe8, 0xc2, 0xfc, 0xc7, 0xb3, 0x88, 0x04, 0xf1, 0x6b, 0xe5, 0xdf,
    0xee, 0xae, 0x28, 0xe0, 0x26, 0xc9, 0x0a, 0x02, 0x18, 0x48, 0xc2, 0x1c, 0x90, 0x5b, 0xdc, 0x2f,
    0x72, 0xda, 0xbd, 0x03, 0x2b, 0xd4, 0x61, 0x9e, 0x62, 0x88, 0x19, 0xba, 0xe5, 0x9f, 0x76, 0xa0,
    0x2f, 0xda, 0x18, 0x12, 0xf8, 0x43, 0x82, 0xd7, 0x41, 0xf6, 0xfa, 0x44, 0x40, 0x3a, 0x3d, 0xc1,
    0x70, 0x69, 0xf9, 0x93, 0x8e, 0xbf, 0xaa, 0xc3, 0xcb, 0xd6, 0x2d, 0x7b, 0x23, 0x54, 0x42, 0xe5,
    0xda, 0xe0, 0x74, 0x50, 0xe5, 0xd8, 0x55, 0x2d, 0xba, 0x9b, 0x94, 0x50, 0x5a, 0x4b, 0xef, 0x23,
    0xdc, 0x04, 0x77, 0x3a, 0x19, 0x46, 0xee, 0xa4, 0x26, 0x58, 0x08, 0x16, 0x07, 0xda, 0x82, 0x79,
};
const std::array<uint8_t, 16 * TEST_VEC_LEN> enc_poly128_vec_ys = {
    0x30, 0x1e, 0x68, 0xaf, 0x22, 0xf3, 0x16, 0x25, 0xe2, 0x2a, 0x96, 0xee, 0x72, 0x70, 0xd1, 0x02,
    0x91, 0x8b, 0x5e, 0x0a, 0x5b, 0x7e, 0xa6, 0xb6, 0x51, 0x05, 0xed, 0xed, 0x81, 0xc0, 0x3e, 0x65,
    0x25, 0x95, 0x29, 0x0e, 0x4f, 0xc1, 0x8a, 0x2d, 0x98, 0x59, 0x38, 0xb5, 0x8b, 0x41, 0xf5, 0xd2,
    0x68, 0x05, 0x2c, 0xcd, 0x5a, 0x17, 0x02, 0x68, 0x5e, 0x28, 0xab, 0xc8, 0x87, 0x78, 0x50, 0xbe,
    0xf2, 0xec, 0xfe, 0xc7, 0x51, 0x06, 0x56, 0x40, 0x98, 0x01, 0x8b, 0xf2, 0xb9, 0xb5, 0x69, 0x4c,
    0xae, 0x31, 0xc9, 0x8d, 0x49, 0x7f, 0x5f, 0x90, 0xd0, 0xb8, 0x2e, 0x6e, 0x52, 0x7c, 0x92, 0x02,
    0x26, 0x0a, 0x3c, 0xe3, 0xe4, 0xe5, 0x31, 0xda, 0x2d, 0x6b, 0x3d, 0x2b, 0x1a, 0xb4, 0xf1, 0xc9,
    0xe0, 0x74, 0x43, 0x9a, 0xed, 0x88, 0x24, 0x6d, 0xd9, 0x0e, 0xf4, 0xbb, 0xee, 0x75, 0x62, 0x34,
    0xc0, 0x95, 0x0f, 0x3a, 0x02, 0x1e, 0xa7, 0xcf, 0x03, 0x00, 0xef, 0x99, 0xa7, 0xed, 0x72, 0x50,
    0x22, 0x51, 0x92, 0x21, 0xbc, 0x12, 0x73, 0x28, 0x73, 0xe5, 0x6a, 0x60, 0xf4, 0xde, 0x4d, 0xa6,
    0x28, 0x38, 0xbf, 0x5c, 0xda, 0x11, 0x24, 0x83, 0x28, 0x4d, 0x70, 0x59, 0xe5, 0x96, 0x9e, 0x58,
    0x23, 0xde, 0x15, 0x91, 0xd3, 0xd8, 0xc3, 0x83, 0xc6, 0x9d, 0x49, 0xdb, 0x5f, 0xfe, 0x3d, 0x97,
    0x62, 0xb5, 0x9b, 0x8c, 0x78, 0xde, 0xa3, 0xf9, 0x97, 0xf8, 0xdf, 0x52, 0xf1, 0x54, 0xe9, 0x44,
    0xbe, 0xe4, 0x1b, 0xad, 0x8f, 0x5b, 0x77, 0x9b, 0x34, 0xa8, 0x41, 0xcb, 0x72, 0x97, 0x58, 0x25,
    0x94, 0xed, 0x2d, 0x63, 0xaa, 0xdf, 0x55, 0x32, 0x72, 0xbb, 0xd4, 0x08, 0x33, 0xba, 0xd5, 0x5f,
    0x38, 0xb0, 0x25, 0xf5, 0xc2, 0x53, 0xb3, 0xb8, 0xe9, 0xbb, 0xf3, 0xe4, 0xb3, 0x9f, 0xa7, 0xd0,
};
const std::array<uint8_t, 16 * TEST_VEC_LEN> enc_poly128_vec_sums = {
    0x4c, 0x41, 0x58, 0x5b, 0x95, 0x1a, 0xc5, 0xfb, 0xf4, 0xba, 0x87, 0x52, 0x6c, 0x45, 0x07, 0xdc,
    0x64, 0x20, 0x2b, 0xd8, 0xcd, 0x5d, 0xa1, 0x4a, 0x02, 0xaa, 0x02, 0xf9, 0xfc, 0xbc, 0xb1, 0xa9,
    0xda, 0x51, 0x00, 0x0e, 0xb4, 0x55, 0xae, 0xad, 0xe7, 0xd2, 0x6a, 0x2a, 0x78, 0x7d, 0x00, 0x0b,
    0x37, 0xcf, 0xac, 0x82, 0x42, 0xc2, 0x1e, 0x50, 0xfb, 0x20, 0xe0, 0xf8, 0x7b, 0x68, 0xe3, 0xcd,
    0xbf, 0xc4, 0x23, 0xa2, 0xe5, 0x29, 0xd4, 0x05, 0xcd, 0xc0, 0x8b, 0xef, 0xe5, 0x58, 0x86, 0xbb,
    0x2b, 0xd7, 0xc8, 0x3f, 0xc6, 0xbb, 0x55, 0xd0, 0xc4, 0x69, 0xd8, 0xb3, 0xe0, 0x3a, 0xd6, 0x97,
    0x64, 0xf9, 0x3a, 0xae, 0x72, 0x6c, 0xcc, 0x89, 0xdb, 0x58, 0xe7, 0xa7, 0x32, 0x62, 0x70, 0x18,
    0x69, 0x3b, 0xd1, 0x15, 0x13, 0x0a, 0x8c, 0xee, 0x10, 0xb9, 0x5c, 0x68, 0x7f, 0x27, 0x10, 0xb9,
    0x34, 0x08, 0xf0, 0x86, 0x36, 0x2a, 0xa1, 0x4f, 0x2d, 0x49, 0xa8, 0xc8, 0x07, 0x55, 0xaa, 0xdf,
    0x55, 0x44, 0x5a, 0x59, 0x97, 0xfa, 0xb1, 0xd4, 0xb4, 0x56, 0xe2, 0x64, 0x05, 0xb5, 0xa8, 0x79,
    0xc6, 0x96, 0x97, 0xbc, 0xfc, 0xd8, 0x2e, 0x81, 0x30, 0x05, 0xb2, 0x45, 0x75, 0xcd, 0x42, 0x77,
    0x51, 0x04, 0xa8, 0x92, 0xf8, 0x0c, 0xa2, 0x1d, 0xa4, 0x15, 0x50, 0x61, 0xba, 0x61, 0x4b, 0x37,
    0x4d, 0x6f, 0x83, 0x9e, 0x80, 0x9d, 0x21, 0x2e, 0xd6, 0x0e, 0x25, 0x16, 0xb1, 0x6e, 0xd4, 0x85,
    0xce, 0x8d, 0xe2, 0x3e, 0x01, 0xe4, 0xdd, 0x58, 0xff, 0x7e, 0x6c, 0xb0, 0x51, 0xc3, 0x1a, 0xc0,
    0x4e, 0x0d, 0x59, 0x33, 0x4f, 0x07, 0x00, 0x1f, 0xc8, 0x20, 0x40, 0x58, 0x69, 0xf1, 0x3a, 0x7c,
    0xe4, 0xb4, 0x52, 0xcf, 0xdb, 0x15, 0x5d, 0x1c, 0xcf, 0xe3, 0xfb, 0xf2, 0xb4, 0x45, 0x25, 0xa9,
};
const std::array<uint8_t, 2 * 16 * TEST_VEC_LEN> enc_poly128_vec_unreduced_products = {
    0x40, 0x30, 0xa1, 0x3c, 0x8b, 0x54, 0x94, 0xe4, 0x02, 0x89, 0xea, 0x01, 0x3a, 0x45, 0xb9, 0xf5,
    0xbd, 0x52, 0xbd, 0xed, 0x83, 0x6a, 0x8c, 0x4c, 0x4e, 0x56, 0x19, 0xc1, 0xea, 0x60, 0xe8, 0x01,
    0x25, 0xd9, 0x25, 0x8e, 0x42, 0xf0, 0xff, 0x74, 0x9a, 0x49, 0x6d, 0xbf, 0x49, 0xd0, 0x03, 0x91,
    0xe2, 0x5b, 0xb9, 0xa4, 0x1c, 0xbb, 0x20, 0x6d, 0xc2, 0xe7, 0x42, 0x6f, 0x5f, 0x41, 0x5d, 0x29,
    0xe3, 0x3b, 0xb6, 0x73, 0x46, 0x38, 0x73, 0x24, 0x51, 0x0b, 0x5d, 0x59, 0x2c, 0x34, 0x7c, 0xad,
    0x4b, 0x2a, 0x07, 0x4a, 0x17, 0xc6, 0x28, 0xc1, 0x62, 0x3d, 0x34, 0xb1, 0x38, 0xc6, 0xe4, 0x56,
    0xd8, 0xad, 0xaa, 0x44, 0xca, 0xcd, 0x1a, 0x42, 0x02, 0x13, 0x81, 0x92, 0x3c, 0x49, 0x06, 0x0d,
    0x30, 0x45, 0x59, 0x09, 0x39, 0x60, 0xd0, 0x69, 0x2a, 0x7a, 0x61, 0x2e, 0x7a, 0x28, 0x3b, 0x32,
    0x2a, 0xd4, 0xba, 0x7a, 0xad, 0x61, 0x2c, 0x25, 0x5b, 0x1d, 0x5f, 0x3a, 0xe6, 0x8e, 0x4f, 0x5a,
    0xd0, 0xe3, 0x25, 0xda, 0x8f, 0x20, 0xae, 0x8c, 0x7d, 0x96, 0x14, 0x23, 0x2f, 0x1c, 0xbf, 0x39,
    0x16, 0x84, 0xf7, 0x57, 0xc2, 0xc3, 0x2a, 0x84, 0xaf, 0xad, 0x57, 0x3a, 0xae, 0x92, 0x91, 0x30,
    0xc9, 0xd9, 0xd8, 0x7c, 0xab, 0x31, 0xbb, 0xef, 0x48, 0xae, 0x47, 0x2b, 0x1d, 0x6c, 0x68, 0x01,
    0xcc, 0xd7, 0xcc, 0x39, 0x17, 0xfb, 0x15, 0x4c, 0x18, 0x77, 0xdc, 0x69, 0xff, 0x2f, 0xb6, 0x4c,
    0xee, 0xdb, 0x75, 0x0c, 0x24, 0x8c, 0x13, 0xa1, 0x85, 0xb1, 0x42, 0x07, 0x65, 0x34, 0xb6, 0x5a,
    0xe0, 0x03, 0xf3, 0x10, 0x1b, 0x2c, 0x4e, 0x22, 0x5e, 0xcd, 0xb8, 0xd7, 0xd2, 0xe9, 0xe3, 0x53,
    0xd4, 0x27, 0xd4, 0x62, 0xa6, 0xe6, 0xf5, 0x1f, 0x23, 0xab, 0xa1, 0x26, 0xe5, 0x76, 0x7f, 0x1b,
    0x00, 0xe3, 0x8a, 0xc0, 0xd1, 0xdf, 0x01, 0xdc, 0xe1, 0x9e, 0xce, 0x04, 0x2a, 0x48, 0x47, 0x95,
    0xa7, 0xcc, 0x37, 0xd9, 0x51, 0xfb, 0x4e, 0x1a, 0x12, 0xe9, 0x3f, 0x3f, 0xdb, 0x39, 0x30, 0x2b,
    0x0e, 0x43, 0x93, 0xf5, 0x2b, 0x66, 0xd9, 0x32, 0xbf, 0xfd, 0x5e, 0xa4, 0x82, 0x6a, 0x4a, 0xd5,
    0xda, 0xd2, 0x5f, 0x35, 0x1d, 0xd4, 0x92, 0x78, 0x35, 0x89, 0x01, 0x74, 0x78, 0xb0, 0xfc, 0x76,
    0xb0, 0xfa, 0xce, 0x0d, 0xee, 0x1a, 0xa6, 0xb0, 0x49, 0x66, 0x12, 0x8f, 0x85, 0xeb, 0xac, 0xfd,
    0x19, 0xcb, 0x31, 0xba, 0x3b, 0x35, 0x56, 0xe4, 0xfa, 0xb7, 0x17, 0xa9, 0xa8, 0xa9, 0x60, 0x08,
    0xd6, 0x3c, 0xeb, 0x11, 0xe6, 0x4d, 0x0a, 0x81, 0x49, 0x7d, 0xfe, 0x61, 0x13, 0xf7, 0x6d, 0x2d,
    0x8c, 0xca, 0x99, 0x08, 0x45, 0x83, 0xdd, 0x96, 0x3a, 0x35, 0x5b, 0xfc, 0xb8, 0x2c, 0x44, 0x59,
    0x7e, 0x79, 0x27, 0x2f, 0xcb, 0x40, 0xfc, 0x45, 0xf3, 0x75, 0x84, 0xcd, 0x3d, 0x7b, 0xab, 0xde,
    0xed, 0x26, 0xe3, 0x6f, 0x11, 0x7b, 0x9e, 0x52, 0x79, 0xb2, 0x95, 0x70, 0xc5, 0xbb, 0x05, 0x33,
    0xa0, 0xfd, 0xac, 0x3a, 0x84, 0x11, 0x16, 0xe3, 0x63, 0x7c, 0xc0, 0x54, 0xa9, 0x7c, 0x78, 0x65,
    0x08, 0x4d, 0xbf, 0xd8, 0x17, 0x8b, 0xb5, 0xc9, 0xb6, 0x33, 0x4c, 0xc1, 0x47, 0x51, 0xe8, 0x1f,
    0xc8, 0x41, 0xea, 0x78, 0x67, 0x71, 0x1c, 0x02, 0x82, 0x96, 0xe1, 0x24, 0xc9, 0x4e, 0x9c, 0xc0,
    0x0e, 0x7b, 0xa4, 0x3b, 0xdb, 0xff, 0xc6, 0x68, 0x7e, 0x23, 0xa6, 0xf6, 0xf2, 0x58, 0x2a, 0x0b,
    0xa0, 0xb0, 0xbc, 0x48, 0xc4, 0xaa, 0xc8, 0x93, 0xfa, 0x2a, 0x02, 0xf0, 0xd1, 0x07, 0xa5, 0x19,
    0x60, 0xc2, 0xe0, 0x3a, 0xfd, 0x58, 0x04, 0x66, 0xa0, 0x7d, 0x2e, 0x6f, 0x55, 0x52, 0x0b, 0x25,
};
const std::array<uint8_t, 16 * TEST_VEC_LEN> enc_poly128_vec_products = {
    0xf3, 0xd3, 0x3a, 0x62, 0xf6, 0x00, 0x04, 0x45, 0xcf, 0x0d, 0x0f, 0xca, 0xce, 0x12, 0x10, 0x04,
    0xe7, 0xa1, 0xa6, 0xad, 0x47, 0x5f, 0x41, 0xe7, 0xe3, 0x1f, 0xd2, 0x12, 0x62, 0xb9, 0x31, 0xe1,
    0x44, 0xdc, 0x36, 0x86, 0x87, 0x61, 0xca, 0xf7, 0x1d, 0x08, 0xcf, 0xd4, 0xdf, 0x7a, 0xa1, 0x7f,
    0x87, 0xe2, 0x86, 0xd6, 0xe1, 0xf1, 0x1b, 0xb7, 0xe1, 0x60, 0x1a, 0x69, 0x4d, 0xad, 0x33, 0x8e,
    0x4e, 0x99, 0xb2, 0x6e, 0xef, 0xc5, 0x76, 0xd5, 0xed, 0xc0, 0x7b, 0x59, 0xba, 0xcd, 0xfc, 0x29,
    0xe9, 0x6d, 0x91, 0x4d, 0x2c, 0x82, 0x93, 0xd7, 0x22, 0xc2, 0x56, 0x49, 0x68, 0x98, 0xbe, 0x82,
    0x82, 0x35, 0x68, 0x26, 0xed, 0x4d, 0xa9, 0xa2, 0x50, 0xa1, 0x49, 0xdc, 0x47, 0x90, 0xae, 0x92,
    0x6f, 0x18, 0xcc, 0x56, 0x59, 0xce, 0x74, 0x87, 0x38, 0x0d, 0x09, 0x76, 0xfa, 0xdb, 0x24, 0xac,
    0x1e, 0xdd, 0xeb, 0x54, 0x88, 0x97, 0x94, 0xbc, 0x92, 0x88, 0x85, 0x26, 0xb4, 0x08, 0xcb, 0xdc,
    0xae, 0x0f, 0xe5, 0xd0, 0xe2, 0x44, 0x4f, 0x10, 0x89, 0xd8, 0x9e, 0xe8, 0xd1, 0x47, 0xe5, 0xeb,
    0x63, 0x05, 0xbe, 0x33, 0x91, 0x0c, 0x1e, 0x26, 0xdf, 0x9c, 0xaf, 0x5b, 0x8a, 0x63, 0xdb, 0xf4,
    0x31, 0x19, 0xc3, 0x66, 0xb9, 0x67, 0xdb, 0x0f, 0xa7, 0x6b, 0xe5, 0xb9, 0x47, 0x6c, 0xa7, 0x01,
    0xb2, 0xf3, 0x1d, 0xd1, 0x0a, 0xa9, 0x1a, 0xb7, 0x34, 0x56, 0xb5, 0xd4, 0xdf, 0xba, 0x6e, 0xc5,
    0x35, 0x9d, 0x36, 0x6e, 0x0f, 0x2b, 0xdb, 0x45, 0x07, 0x3d, 0x3d, 0xb4, 0x9e, 0x69, 0xc9, 0xce,
    0x79, 0xa5, 0xaa, 0x08, 0xfb, 0x63, 0x33, 0x7b, 0xcd, 0xc1, 0x82, 0xb6, 0x6e, 0xbd, 0x67, 0x64,
    0xfe, 0xc6, 0x7f, 0x9c, 0xaa, 0x5e, 0xf9, 0xa3, 0xa8, 0x8a, 0xf7, 0x6a, 0xcc, 0x92, 0x3c, 0x67,
};

const std::array<uint8_t, 24 * TEST_VEC_LEN> enc_poly192_vec_xs = {
    0xbb, 0x0b, 0xc7, 0xc5, 0x05, 0xd6, 0x28, 0x12, 0x8b, 0xcb, 0x15, 0x3f, 0x9f, 0xd5, 0x79, 0xd6,
    0xf7, 0x49, 0xd3, 0x92, 0x4a, 0xae, 0xd0, 0x41, 0xa6, 0xe8, 0x0c, 0x2e, 0xa2, 0x12, 0x46, 0xf4,
    0x50, 0xe7, 0xd5, 0xb3, 0x05, 0xe1, 0xb6, 0xb2, 0x22, 0x67, 0xb2, 0x0d, 0x6d, 0x14, 0x79, 0x06,
    0x5d, 0x19, 0x75, 0xd9, 0x70, 0x7e, 0xc7, 0x32, 0x8d, 0xce, 0x4f, 0x2f, 0x01, 0x45, 0x39, 0xbf,
    0x78, 0xb4, 0xac, 0xc1, 0x4a, 0xd5, 0xbf, 0xe4, 0x55, 0x5d, 0xcf, 0x90, 0xa3, 0x00, 0x68, 0x59,
    0xe2, 0x54, 0x63, 0x19, 0xac, 0xb5, 0x79, 0x51, 0xa0, 0x6b, 0xae, 0xfc, 0xcb, 0x27, 0x11, 0xf7,
    0x50, 0x63, 0x9a, 0xc8, 0x9e, 0xf3, 0x81, 0x9a, 0x8e, 0x23, 0x2f, 0xd4, 0xc7, 0x7d, 0xa8, 0xcb,
    0x9a, 0x67, 0xe9, 0x58, 0xed, 0xba, 0x7e, 0xe3, 0x42, 0xf6, 0xfb, 0x73, 0x18, 0xc5, 0x29, 0xc5,
    0x10, 0x82, 0xa4, 0xb8, 0x73, 0x25, 0xb4, 0x14, 0xce, 0xc1, 0x1b, 0x95, 0xc6, 0x17, 0xaf, 0x22,
    0x76, 0x5a, 0x78, 0x99, 0x74, 0x2c, 0x3a, 0x35, 0xf0, 0x3d, 0xf6, 0xcc, 0x2d, 0x1b, 0x6e, 0x8c,
    0x1f, 0x71, 0xa1, 0xc8, 0x19, 0xd3, 0xc9, 0x8c, 0x44, 0x80, 0x52, 0x65, 0x2d, 0x96, 0xd5, 0x6a,
    0x5f, 0xaa, 0x44, 0x4c, 0x51, 0xf7, 0x4c, 0x31, 0x8b, 0xea, 0xc6, 0x7a, 0xd3, 0xb8, 0x84, 0x71,
    0xdc, 0x68, 0x78, 0x9f, 0x93, 0xf6, 0xfb, 0x5f, 0x97, 0xb9, 0x2a, 0x73, 0xa0, 0x96, 0xe7, 0x9f,
    0xf9, 0xfa, 0xe7, 0x6f, 0xb2, 0xe0, 0x4f, 0x32, 0x29, 0xee, 0x4b, 0xca, 0xfa, 0x9c, 0xd1, 0x1c,
    0x18, 0xa6, 0x89, 0x08, 0x41, 0x75, 0x22, 0x5b, 0xbb, 0xca, 0x72, 0x38, 0xd5, 0xaa, 0x41, 0x12,
    0xda, 0x5a, 0x39, 0x97, 0xfd, 0x05, 0x04, 0x22, 0x6d, 0x6a, 0xd5, 0x8e, 0xc5, 0x71, 0xfb, 0x92,
    0x2f, 0x05, 0x62, 0xcc, 0xa9, 0x8a, 0xde, 0xc7, 0x59, 0xcd, 0x05, 0x6d, 0x9e, 0xbd, 0x11, 0x36,
    0x29, 0x8d, 0x4a, 0x8d, 0xbf, 0x71, 0x9d, 0x58, 0x06, 0xa1, 0xc6, 0x59, 0xb8, 0x2e, 0x91, 0xdd,
    0xae, 0xe6, 0x5d, 0x35, 0x0b, 0x54, 0xae, 0x26, 0xc2, 0x3c, 0xd8, 0xb1, 0x68, 0x58, 0xd6, 0x27,
    0x5f, 0x95, 0xaa, 0xa8, 0xe5, 0xa1, 0x8d, 0x5a, 0x57, 0x00, 0xcd, 0x15, 0x78, 0x92, 0xc9, 0x8b,
    0xbb, 0xc1, 0x8e, 0x6d, 0x2e, 0xa3, 0x50, 0x6d, 0xb0, 0xc4, 0x53, 0x32, 0x9f, 0x5e, 0x64, 0x88,
    0x41, 0x9a, 0x1a, 0x21, 0x46, 0x65, 0xfc, 0x86, 0xf1, 0x74, 0x5a, 0xbc, 0x17, 0xdb, 0xff, 0x6c,
    0x83, 0xea, 0x50, 0x33, 0xf2, 0x56, 0x15, 0x82, 0x22, 0x54, 0xf6, 0xbc, 0x82, 0xf4, 0x01, 0x4c,
    0x26, 0x9f, 0x07, 0x91, 0xeb, 0xef, 0x08, 0x22, 0x83, 0x5b, 0x2e, 0xb0, 0x2c, 0xee, 0x28, 0x62,
};
const std::array<uint8_t, 24 * TEST_VEC_LEN> enc_poly192_vec_ys = {
    0xbf, 0xd7, 0x18, 0x71, 0xef, 0x12, 0xd8, 0x86, 0xde, 0xa6, 0x04, 0xee, 0x05, 0xd0, 0x94, 0xe1,
    0x32, 0x0f, 0x3a, 0x72, 0xe1, 0xac, 0xad, 0x5b, 0x05, 0x2b, 0xd0, 0xfb, 0x66, 0x4f, 0x85, 0x66,
    0xaf, 0x2e, 0x35, 0x45, 0x66, 0x7b, 0xa0, 0x71, 0x36, 0x14, 0x70, 0xad, 0x24, 0xa3, 0xa9, 0xf8,
    0xb5, 0xfd, 0xa7, 0xd7, 0x26, 0x5e, 0x54, 0xdd, 0x1a, 0xd6, 0x39, 0xed, 0x0c, 0x77, 0x53, 0xa5,
    0xe7, 0xb9, 0x92, 0x00, 0xc1, 0x90, 0xf5, 0x13, 0xe2, 0xaa, 0xea, 0x08, 0x31, 0x90, 0x63, 0x7f,
    0xd9, 0xfd, 0xf8, 0x99, 0x39, 0x82, 0x6e, 0x28, 0x6d, 0x32, 0x8a, 0x68, 0x86, 0x64, 0xf6, 0x9e,
    0x3f, 0xaf, 0xf5, 0x11, 0xd7, 0x22, 0x08, 0x2d, 0x76, 0x8a, 0xdd, 0x70, 0xe5, 0x4e, 0x5a, 0x34,
    0xd1, 0xc5, 0xc4, 0x9b, 0xa1, 0xb0, 0x8d, 0x77, 0xac, 0xff, 0x6c, 0x7a, 0xde, 0xf4, 0x21, 0xcc,
    0xe7, 0x50, 0x2b, 0x3f, 0xb1, 0xe9, 0xb5, 0x67, 0xa9, 0x2a, 0x39, 0xdb, 0xb3, 0x7e, 0x5c, 0x9a,
    0x4d, 0xa6, 0x24, 0xcd, 0xaa, 0xd0, 0xe5, 0x8b, 0x8b, 0xe9, 0x52, 0x34, 0x2a, 0xd4, 0xee, 0x18,
    0xcb, 0x4e, 0xad, 0xa5, 0xa4, 0x41, 0xb1, 0xb6, 0xc0, 0x78, 0x3c, 0xba, 0x3c, 0xae, 0x95, 0x3a,
    0xdb, 0x59, 0x80, 0x7e, 0xdb, 0xe3, 0x5f, 0xa9, 0x54, 0x31, 0x5d, 0x82, 0xc2, 0x13, 0x25, 0x0a,
    0x8c, 0x86, 0x66, 0x67, 0xf1, 0xce, 0x68, 0x20, 0x84, 0x53, 0x40, 0x41, 0xeb, 0xdc, 0xa1, 0xe0,
    0x4e, 0xd5, 0x5c, 0x83, 0x7d, 0x55, 0x2e, 0x02, 0x6c, 0x6e, 0xee, 0x33, 0x47, 0xa2, 0x31, 0x84,
    0xb1, 0x2a, 0x97, 0x6c, 0x15, 0x94, 0xb2, 0xba, 0x8d, 0x7c, 0x2f, 0xec, 0x92, 0x4e, 0x29, 0xc6,
    0x78, 0xaa, 0xf9, 0xa9, 0x6f, 0x39, 0x11, 0x3c, 0xae, 0xf0, 0x37, 0x5e, 0x72, 0xef, 0x43, 0x80,
    0xfd, 0xe8, 0xc6, 0xb6, 0xa7, 0xa0, 0xfd, 0x04, 0x94, 0x9f, 0xb2, 0x2d, 0x76, 0x05, 0x48, 0x49,
    0xab, 0x86, 0xfe, 0x33, 0x77, 0x47, 0x4d, 0x2c, 0x2c, 0xc3, 0xb6, 0xe3, 0x59, 0x35, 0xf1, 0x46,
    0x1c, 0x13, 0x0f, 0x3e, 0x92, 0x25, 0x32, 0x5b, 0x54, 0x57, 0xc0, 0x3b, 0x5b, 0x5c, 0x24, 0x29,
    0xda, 0x72, 0x62, 0x89, 0x66, 0x55, 0x86, 0xbb, 0x81, 0x79, 0xea, 0x24, 0xb5, 0xd6, 0x15, 0xb2,
    0x57, 0xca, 0x90, 0x5b, 0xd7, 0x0d, 0xab, 0xd7, 0x35, 0x2e, 0xc7, 0xdd, 0xfd, 0xa3, 0x3c, 0xbd,
    0xbb, 0x20, 0xe0, 0xf3, 0x2d, 0xf2, 0x59, 0x85, 0x91, 0x02, 0x80, 0x0e, 0xd4, 0x63, 0xae, 0xde,
    0x9f, 0x91, 0x45, 0x7f, 0x5a, 0x86, 0x26, 0x1e, 0x56, 0xf3, 0xf8, 0x5a, 0xde, 0x84, 0x72, 0xd1,
    0x40, 0x75, 0xb8, 0x42, 0x98, 0xac, 0x95, 0xb8, 0x62, 0x94, 0x3e, 0xce, 0xdc, 0x91, 0x3a, 0x6d,
};
const std::array<uint8_t, 24 * TEST_VEC_LEN> enc_poly192_vec_sums = {
    0x04, 0xdc, 0xdf, 0xb4, 0xea, 0xc4, 0xf0, 0x94, 0x55, 0x6d, 0x11, 0xd1, 0x9a, 0x05, 0xed, 0x37,
    0xc5, 0x46, 0xe9, 0xe0, 0xab, 0x02, 0x7d, 0x1a, 0xa3, 0xc3, 0xdc, 0xd5, 0xc4, 0x5d, 0xc3, 0x92,
    0xff, 0xc9, 0xe0, 0xf6, 0x63, 0x9a, 0x16, 0xc3, 0x14, 0x73, 0xc2, 0xa0, 0x49, 0xb7, 0xd0, 0xfe,
    0xe8, 0xe4, 0xd2, 0x0e, 0x56, 0x20, 0x93, 0xef, 0x97, 0x18, 0x76, 0xc2, 0x0d, 0x32, 0x6a, 0x1a,
    0x9f, 0x0d, 0x3e, 0xc1, 0x8b, 0x45, 0x4a, 0xf7, 0xb7, 0xf7, 0x25, 0x98, 0x92, 0x90, 0x0b, 0x26,
    0x3b, 0xa9, 0x9b, 0x80, 0x95, 0x37, 0x17, 0x79, 0xcd, 0x59, 0x24, 0x94, 0x4d, 0x43, 0xe7, 0x69,
    0x6f, 0xcc, 0x6f, 0xd9, 0x49, 0xd1, 0x89, 0xb7, 0xf8, 0xa9, 0xf2, 0xa4, 0x22, 0x33, 0xf2, 0xff,
    0x4b, 0xa2, 0x2d, 0xc3, 0x4c, 0x0a, 0xf3, 0x94, 0xee, 0x09, 0x97, 0x09, 0xc6, 0x31, 0x08, 0x09,
    0xf7, 0xd2, 0x8f, 0x87, 0xc2, 0xcc, 0x01, 0x73, 0x67, 0xeb, 0x22, 0x4e, 0x75, 0x69, 0xf3, 0xb8,
    0x3b, 0xfc, 0x5c, 0x54, 0xde, 0xfc, 0xdf, 0xbe, 0x7b, 0xd4, 0xa4, 0xf8, 0x07, 0xcf, 0x80, 0x94,
    0xd4, 0x3f, 0x0c, 0x6d, 0xbd, 0x92, 0x78, 0x3a, 0x84, 0xf8, 0x6e, 0xdf, 0x11, 0x38, 0x40, 0x50,
    0x84, 0xf3, 0xc4, 0x32, 0x8a, 0x14, 0x13, 0x98, 0xdf, 0xdb, 0x9b, 0xf8, 0x11, 0xab, 0xa1, 0x7b,
    0x50, 0xee, 0x1e, 0xf8, 0x62, 0x38, 0x93, 0x7f, 0x13, 0xea, 0x6a, 0x32, 0x4b, 0x4a, 0x46, 0x7f,
    0xb7, 0x2f, 0xbb, 0xec, 0xcf, 0xb5, 0x61, 0x30, 0x45, 0x80, 0xa5, 0xf9, 0xbd, 0x3e, 0xe0, 0x98,
    0xa9, 0x8c, 0x1e, 0x64, 0x54, 0xe1, 0x90, 0xe1, 0x36, 0xb6, 0x5d, 0xd4, 0x47, 0xe4, 0x68, 0xd4,
    0xa2, 0xf0, 0xc0, 0x3e, 0x92, 0x3c, 0x15, 0x1e, 0xc3, 0x9a, 0xe2, 0xd0, 0xb7, 0x9e, 0xb8, 0x12,
    0xd2, 0xed, 0xa4, 0x7a, 0x0e, 0x2a, 0x23, 0xc3, 0xcd, 0x52, 0xb7, 0x40, 0xe8, 0xb8, 0x59, 0x7f,
    0x82, 0x0b, 0xb4, 0xbe, 0xc8, 0x36, 0xd0, 0x74, 0x2a, 0x62, 0x70, 0xba, 0xe1, 0x1b, 0x60, 0x9b,
    0xb2, 0xf5, 0x52, 0x0b, 0x99, 0x71, 0x9c, 0x7d, 0x96, 0x6b, 0x18, 0x8a, 0x33, 0x04, 0xf2, 0x0e,
    0x85, 0xe7, 0xc8, 0x21, 0x83, 0xf4, 0x0b, 0xe1, 0xd6, 0x79, 0x27, 0x31, 0xcd, 0x44, 0xdc, 0x39,
    0xec, 0x0b, 0x1e, 0x36, 0xf9, 0xae, 0xfb, 0xba, 0x85, 0xea, 0x94, 0xef, 0x62, 0xfd, 0x58, 0x35,
    0xfa, 0xba, 0xfa, 0xd2, 0x6b, 0x97, 0xa5, 0x03, 0x60, 0x76, 0xda, 0xb2, 0xc3, 0xb8, 0x51, 0xb2,
    0x1c, 0x7b, 0x15, 0x4c, 0xa8, 0xd0, 0x33, 0x9c, 0x74, 0xa7, 0x0e, 0xe6, 0x5c, 0x70, 0x73, 0x9d,
    0x66, 0xea, 0xbf, 0xd3, 0x73, 0x43, 0x9d, 0x9a, 0xe1, 0xcf, 0x10, 0x7e, 0xf0, 0x7f, 0x12, 0x0f,
};
const std::array<uint8_t, 2 * 24 * TEST_VEC_LEN> enc_poly192_vec_unreduced_products = {
    0xa9, 0xaf, 0xab, 0x5f, 0x1e, 0xed, 0xcc, 0xb9, 0xdf, 0xb1, 0x54, 0x85, 0x4c, 0x10, 0x9f, 0x80,
    0x26, 0x07, 0x04, 0xb0, 0x40, 0xda, 0x41, 0x37, 0xe4, 0xed, 0xe6, 0x0e, 0xd1, 0xfa, 0x2e, 0x88,
    0x9c, 0xb2, 0x83, 0xe3, 0x03, 0xa0, 0x4f, 0x26, 0xba, 0xfc, 0xd7, 0x71, 0x40, 0x64, 0x8e, 0x16,
    0x3e, 0x50, 0xb7, 0x73, 0x65, 0x6c, 0xf4, 0x92, 0x50, 0x77, 0x6e, 0x32, 0x9f, 0xa9, 0x69, 0xf2,
    0x46, 0x7e, 0xbc, 0xde, 0x12, 0x89, 0x12, 0xae, 0x24, 0x68, 0x8c, 0x1b, 0x9a, 0xb3, 0x37, 0x70,
    0xb4, 0x3f, 0x8b, 0x82, 0x84, 0xca, 0xf5, 0x10, 0x11, 0xdb, 0x08, 0x26, 0xa5, 0x71, 0x3a, 0x02,
    0xd9, 0x1d, 0x9d, 0xc6, 0xc8, 0x6f, 0x79, 0x71, 0xd4, 0xc5, 0xd3, 0xfd, 0x04, 0x17, 0xff, 0xe6,
    0x4d, 0xa0, 0x04, 0xdc, 0x03, 0xd4, 0x0b, 0xa4, 0xae, 0x89, 0xb0, 0xe0, 0x32, 0x69, 0xb7, 0xc1,
    0x30, 0xb7, 0xd3, 0xb3, 0xe6, 0x1b, 0xc8, 0xa2, 0x86, 0x3f, 0x31, 0x7a, 0x2c, 0x9b, 0x3c, 0x0f,
    0xca, 0xcd, 0x3e, 0x60, 0xf9, 0xef, 0xa3, 0xe1, 0x91, 0x98, 0xac, 0x42, 0x9b, 0xd2, 0x32, 0x1c,
    0xe3, 0x61, 0x08, 0x17, 0xcd, 0x32, 0x0a, 0x4b, 0xe3, 0x30, 0x0f, 0x76, 0xb3, 0x76, 0x69, 0x2b,
    0x39, 0xea, 0x93, 0xf3, 0x3d, 0x5c, 0xbd, 0x20, 0x72, 0xdd, 0x88, 0x53, 0x7e, 0xa3, 0x26, 0x71,
    0x30, 0x5d, 0x1e, 0x51, 0x2c, 0x79, 0xf2, 0xe2, 0xc3, 0x6d, 0xbe, 0xae, 0xc8, 0xd6, 0x1b, 0xf6,
    0x0d, 0xa1, 0xe4, 0x3f, 0xbe, 0x90, 0x29, 0x20, 0x3a, 0xb9, 0xbb, 0xfd, 0x09, 0x90, 0xaf, 0xd2,
    0xde, 0xe3, 0x33, 0x2e, 0xf9, 0xa6, 0xa0, 0x63, 0x63, 0xd1, 0x30, 0x71, 0xca, 0x42, 0x5a, 0x28,
    0x58, 0xbc, 0x01, 0x6e, 0xff, 0x4a, 0xb6, 0x12, 0xbf, 0x3b, 0xc1, 0x2e, 0x96, 0xf9, 0xef, 0x31,
    0xf1, 0x7c, 0xcd, 0xb7, 0x4d, 0x8e, 0x17, 0x3e, 0x75, 0x04, 0x39, 0x9f, 0x8d, 0x83, 0x40, 0x17,
    0xd8, 0x6f, 0xb6, 0x1f, 0x02, 0x44, 0x72, 0x3a, 0x6e, 0xc7, 0xcd, 0xef, 0xe7, 0x4d, 0x26, 0x12,
    0x9e, 0x89, 0xfd, 0xe7, 0xd0, 0xdf, 0xba, 0xbb, 0x2e, 0xf2, 0x18, 0x80, 0x39, 0x2e, 0x6d, 0xf8,
    0x9a, 0xde, 0xd2, 0x17, 0x22, 0xf1, 0x05, 0x6c, 0x33, 0x8b, 0xea, 0x09, 0x61, 0x49, 0x61, 0x75,
    0x8d, 0xf9, 0xa6, 0xb6, 0xc1, 0x06, 0x87, 0xb5, 0xfc, 0xb5, 0xd7, 0x3e, 0x58, 0x64, 0x44, 0x5c,
    0x00, 0xd3, 0x0f, 0xd6, 0x10, 0xab, 0xba, 0xae, 0x46, 0xaf, 0x0f, 0xf7, 0xd6, 0xf0, 0xcc, 0x74,
    0xe1, 0xec, 0xd2, 0x7c, 0x4b, 0x36, 0xf5, 0x34, 0xf3, 0x2c, 0x0d, 0xfc, 0x2a, 0x63, 0xc3, 0xe6,
    0xd8, 0x4f, 0xf7, 0x63, 0xc7, 0xad, 0xc8, 0xb1, 0xea, 0x03, 0xd5, 0xc2, 0x18, 0xac, 0x60, 0x03,
    0x90, 0x43, 0x42, 0xd5, 0x4e, 0x02, 0x75, 0x42, 0xcd, 0x4f, 0x4f, 0x6b, 0xf2, 0xcb, 0xa0, 0x1e,
    0x84, 0x35, 0x7a, 0xfc, 0x11, 0x74, 0x75, 0x04, 0x7d, 0x88, 0x7f, 0x85, 0x65, 0x07, 0x39, 0x7b,
    0xa5, 0xcb, 0x54, 0x90, 0x61, 0xd3, 0x91, 0xb0, 0xf2, 0x66, 0x63, 0xcc, 0xa6, 0xe6, 0x63, 0x00,
    0x8c, 0x58, 0xf2, 0x44, 0xfe, 0xea, 0xfb, 0x98, 0x33, 0x72, 0x2c, 0x4e, 0x20, 0x9f, 0x15, 0xc5,
    0x69, 0x09, 0xc5, 0x30, 0xde, 0xea, 0xdb, 0xf1, 0x99, 0x86, 0x5c, 0x3b, 0xa3, 0x1b, 0x63, 0x2e,
    0x06, 0x21, 0x24, 0x1b, 0xf5, 0xa1, 0x9d, 0x91, 0x70, 0xa4, 0x1f, 0x47, 0x3f, 0xf6, 0xdf, 0x0d,
    0xb0, 0xb2, 0x1d, 0x36, 0x14, 0x16, 0x1c, 0xef, 0x17, 0x75, 0x1f, 0xf8, 0x94, 0xd5, 0xf6, 0x46,
    0x30, 0xa0, 0x62, 0xa7, 0x27, 0xbe, 0xdc, 0x6f, 0xa5, 0x6d, 0x56, 0x7e, 0x13, 0x12, 0xaf, 0x9a,
    0x68, 0xbf, 0x64, 0x91, 0x5c, 0x0e, 0xc2, 0x98, 0x18, 0x61, 0x64, 0xf1, 0xc9, 0x79, 0x5c, 0x03,
    0x74, 0x1b, 0x5e, 0xf6, 0x87, 0x0f, 0x83, 0x2a, 0x31, 0xbc, 0xfb, 0xb4, 0x40, 0xfe, 0x7b, 0x60,
    0x50, 0x50, 0x93, 0x15, 0xe9, 0x25, 0xa0, 0x88, 0x97, 0x8c, 0xff, 0x33, 0xdc, 0x19, 0xa5, 0x54,
    0xc8, 0x3d, 0xe0, 0xd3, 0x5d, 0x11, 0xc2, 0xef, 0x30, 0xe5, 0x42, 0x4a, 0xcf, 0x22, 0xe6, 0x35,
    0x28, 0xd7, 0x3d, 0x22, 0xd3, 0x59, 0x52, 0xff, 0x30, 0x26, 0xab, 0x55, 0xf0, 0xf8, 0x76, 0xb1,
    0x39, 0x69, 0x3e, 0x83, 0xaf, 0xc3, 0x5e, 0x6d, 0xc4, 0xe1, 0xb8, 0x4f, 0xd1, 0xff, 0x1e, 0x17,
    0x73, 0xec, 0x91, 0x65, 0xf2, 0xd8, 0xd4, 0xaf, 0x91, 0x11, 0x9a, 0x05, 0xe7, 0xce, 0xa8, 0x21,
    0xd7, 0x94, 0xe3, 0xec, 0xdd, 0x4a, 0x6c, 0xd8, 0x66, 0x40, 0xa0, 0x69, 0xa7, 0xa4, 0x89, 0x23,
    0xe5, 0x30, 0x3d, 0xd9, 0x54, 0xd3, 0xec, 0xb2, 0x23, 0xaf, 0x4a, 0x02, 0xd0, 0x28, 0xef, 0xcc,
    0x47, 0x14, 0x70, 0xca, 0x9c, 0xa6, 0x9c, 0x83, 0x3d, 0xe2, 0xc3, 0x09, 0x07, 0x8a, 0x4d, 0x5b,
    0x7b, 0x90, 0xe4, 0x4c, 0x49, 0xd3, 0x77, 0x43, 0x7f, 0xc7, 0x41, 0x87, 0xb9, 0x65, 0x59, 0x71,
    0x4b, 0x0e, 0x18, 0x67, 0xd6, 0xc3, 0x4d, 0xbd, 0x9d, 0x7c, 0x3d, 0x0b, 0xc9, 0xfd, 0xdb, 0x68,
    0x48, 0x00, 0xc5, 0x67, 0xd3, 0x26, 0x2d, 0xa4, 0x4d, 0x7a, 0x3b, 0xed, 0xd0, 0x8c, 0x2e, 0x0f,
    0x6c, 0x34, 0x16, 0xf8, 0xc4, 0x8d, 0x8e, 0xb6, 0x2b, 0xdc, 0xbc, 0x87, 0xa8, 0x60, 0x55, 0xc4,
    0xde, 0x7f, 0xbe, 0x85, 0x1a, 0x87, 0x4e, 0xcc, 0x6d, 0x30, 0x66, 0x5a, 0xaa, 0xc3, 0x65, 0x79,
    0xdf, 0x9f, 0x79, 0x08, 0xf0, 0x8d, 0x06, 0x81, 0xb0, 0xa2, 0x69, 0x14, 0x95, 0x6f, 0x3d, 0x16,
};
const std::array<uint8_t, 24 * TEST_VEC_LEN> enc_poly192_vec_products = {
    0xa4, 0xd9, 0x6d, 0x04, 0xae, 0x61, 0x79, 0x16, 0x4c, 0xe2, 0x07, 0xee, 0xb6, 0x71, 0xa1, 0x54,
    0x13, 0xad, 0xdd, 0x0e, 0xb9, 0xc7, 0xd8, 0x11, 0x45, 0x5a, 0x26, 0xf7, 0xae, 0xbb, 0xab, 0xd9,
    0x65, 0x13, 0x40, 0xfa, 0x41, 0x9e, 0x45, 0xfa, 0xb9, 0xf7, 0xeb, 0x28, 0xfa, 0x0f, 0x8d, 0xbd,
    0x06, 0x75, 0xca, 0x3d, 0x24, 0xe9, 0xc9, 0xee, 0x26, 0x58, 0x32, 0x0f, 0xec, 0xa7, 0x8a, 0xee,
    0x8d, 0xdd, 0x0c, 0xa2, 0xfb, 0x83, 0xf1, 0x17, 0xcc, 0x32, 0x8b, 0x25, 0x5a, 0xf7, 0x06, 0x85,
    0xab, 0x12, 0xa2, 0x51, 0xd3, 0x58, 0xae, 0xa1, 0xad, 0xca, 0xdc, 0x69, 0x9f, 0xe5, 0xaa, 0x8f,
    0xfa, 0xe5, 0xe0, 0x7c, 0xef, 0x8d, 0x74, 0x88, 0xb2, 0x29, 0xd4, 0x7d, 0xb0, 0xda, 0x2b, 0x0c,
    0x94, 0x26, 0x1e, 0xf0, 0xf1, 0x39, 0x8f, 0xd4, 0x2c, 0x9f, 0x2c, 0x2f, 0x90, 0x06, 0x34, 0xd6,
    0xbc, 0xd8, 0xf5, 0xab, 0x97, 0x24, 0x92, 0xaf, 0xe6, 0x9f, 0x4f, 0xde, 0x0d, 0x9c, 0xc2, 0x53,
    0xca, 0xb6, 0x2d, 0x2f, 0x73, 0x91, 0x38, 0x41, 0x36, 0xd8, 0x14, 0xd2, 0xa6, 0x5e, 0x7b, 0x33,
    0x37, 0x29, 0x2e, 0xc4, 0xb5, 0xe0, 0xea, 0xdb, 0xde, 0x6c, 0xba, 0x24, 0xba, 0x17, 0x43, 0x7f,
    0x3f, 0xac, 0x6c, 0x27, 0x33, 0x52, 0xe1, 0x85, 0x2c, 0x12, 0x78, 0x5a, 0x60, 0x7e, 0x80, 0x8c,
    0x63, 0xc4, 0xf8, 0xf0, 0xb4, 0xa4, 0x59, 0xbf, 0x0a, 0xef, 0x84, 0xb0, 0x1e, 0x43, 0xbc, 0x45,
    0x01, 0x7c, 0xe1, 0xa8, 0x07, 0x96, 0xad, 0x34, 0xd1, 0x86, 0x26, 0x4a, 0x0a, 0x79, 0x5f, 0x62,
    0x36, 0x16, 0xc0, 0x9d, 0x66, 0x00, 0x15, 0xff, 0x72, 0x4c, 0x49, 0x6a, 0xc1, 0x37, 0x3f, 0x3f,
    0xcc, 0x60, 0x88, 0x66, 0xd3, 0x61, 0xd8, 0x7d, 0x41, 0xfd, 0x7f, 0xbc, 0x4b, 0xd0, 0xbf, 0xed,
    0x37, 0x0b, 0x6f, 0xc3, 0xa2, 0x37, 0x75, 0xc9, 0x57, 0xfa, 0x66, 0x92, 0x8a, 0xac, 0x74, 0xd7,
    0x62, 0xe9, 0x45, 0x7f, 0x38, 0x26, 0x3d, 0x0e, 0xb5, 0x73, 0x2d, 0xc3, 0x20, 0xae, 0x03, 0xf2,
    0x04, 0x98, 0x67, 0x10, 0x42, 0x4e, 0x75, 0x15, 0xe2, 0x9a, 0xa8, 0xa5, 0x1d, 0x8b, 0x34, 0x14,
    0x1a, 0xd5, 0xf0, 0x56, 0x98, 0xd8, 0x63, 0x5d, 0x7a, 0x5e, 0x41, 0xc6, 0xec, 0xf8, 0x75, 0xc9,
    0x57, 0x0e, 0xfa, 0x26, 0x14, 0x9b, 0x0d, 0x67, 0x94, 0x80, 0x87, 0x05, 0xc5, 0x66, 0xc9, 0x94,
    0xbd, 0xaa, 0xe8, 0xe3, 0xb3, 0xc6, 0x8a, 0x34, 0xb2, 0xe2, 0x9a, 0x52, 0x32, 0xfc, 0x09, 0x1b,
    0x79, 0x4f, 0x05, 0x79, 0x92, 0x0d, 0xc2, 0x07, 0x5e, 0x96, 0x3c, 0x4c, 0xbe, 0x12, 0x56, 0x6a,
    0x8b, 0xec, 0x1f, 0x82, 0x7c, 0x39, 0x02, 0xc0, 0x8d, 0x4a, 0x73, 0xdc, 0x7b, 0x43, 0x4b, 0xb0,
};

const std::array<uint8_t, 32 * TEST_VEC_LEN> enc_poly256_vec_xs = {
    0x02, 0xad, 0x84, 0x5b, 0xc6, 0x2b, 0x60, 0x1a, 0x8e, 0x90, 0xf8, 0xaf, 0xf9, 0x55, 0x39, 0xe1,
    0xbd, 0x4d, 0xf4, 0x6d, 0x7d, 0x52, 0x85, 0xe7, 0x6d, 0x55, 0xe1, 0x92, 0x3a, 0x30, 0x06, 0xe8,
    0xad, 0x94, 0x45, 0x2c, 0x9d, 0xc1, 0xf5, 0x6e, 0x60, 0x75, 0xed, 0x5b, 0x1a, 0xb1, 0x3e, 0xd6,
    0xec, 0xda, 0x20, 0x9f, 0x3c, 0x2b, 0x55, 0x7c, 0x78, 0x6d, 0x11, 0x43, 0xf2, 0x5d, 0x2a, 0xcc,
    0xba, 0x5d, 0xf5, 0x5e, 0x1b, 0x2d, 0xbf, 0xaa, 0xcc, 0x6f, 0x67, 0x66, 0x9d, 0x7e, 0x24, 0x33,
    0xe0, 0x81, 0x65, 0x85, 0x72, 0xdd, 0xe6, 0x88, 0xa5, 0x00, 0x45, 0x6b, 0xe3, 0x00, 0x81, 0x95,
    0x56, 0xba, 0x21, 0x10, 0x77, 0x2f, 0x5b, 0xf8, 0x91, 0xc6, 0x15, 0x9c, 0x24, 0x71, 0x0c, 0x4c,
    0xe6, 0x9e, 0x61, 0x81, 0x91, 0xe5, 0x07, 0x60, 0x2f, 0xe7, 0x84, 0xd8, 0x36, 0x82, 0x71, 0xd9,
    0xc9, 0x27, 0xe9, 0x9e, 0x1f, 0x17, 0xae, 0xc2, 0xca, 0x2c, 0x0b, 0xf4, 0x40, 0x27, 0x65, 0x09,
    0xe8, 0xa0, 0x66, 0xc1, 0x44, 0xa8, 0xb7, 0x6c, 0xd7, 0xe0, 0x84, 0xa0, 0x8d, 0x10, 0xfb, 0xc0,
    0xb6, 0x92, 0x9b, 0xfc, 0xeb, 0x68, 0xbe, 0x13, 0x68, 0x7f, 0x42, 0xf4, 0x0f, 0x20, 0xb5, 0x47,
    0xeb, 0x99, 0xa7, 0x18, 0xfd, 0xa4, 0xf2, 0x33, 0xe1, 0x72, 0x6f, 0xc3, 0x86, 0x61, 0xb2, 0x8a,
    0x11, 0x81, 0xf3, 0xe2, 0xd2, 0x09, 0x86, 0x4c, 0xef, 0xef, 0x45, 0x18, 0x16, 0x80, 0x89, 0x32,
    0x47, 0x27, 0xec, 0xd4, 0x80, 0x93, 0xcb, 0x06, 0xc4, 0x36, 0x9f, 0x31, 0x7f, 0xff, 0x1f, 0x80,
    0x97, 0x0d, 0x18, 0x56, 0x04, 0xcd, 0x4e, 0x3f, 0xa9, 0xb8, 0x11, 0x87, 0x9b, 0x9a, 0x34, 0x3d,
    0x78, 0xb9, 0x06, 0xde, 0xf5, 0x2f, 0xed, 0x2e, 0x94, 0x1c, 0xc5, 0x1b, 0x7c, 0x0b, 0x06, 0x16,
    0xb4, 0x7f, 0xe7, 0x86, 0x01, 0xc5, 0xb2, 0x1b, 0xaf, 0x45, 0x43, 0x9d, 0x24, 0xe9, 0xcd, 0x66,
    0xf6, 0x35, 0x39, 0x15, 0x3a, 0x41, 0x1f, 0x43, 0xa8, 0xc7, 0x29, 0x3c, 0x2e, 0xc3, 0xac, 0xe6,
    0x50, 0xbc, 0x89, 0xfe, 0xee, 0xef, 0x2c, 0xdf, 0x54, 0x6d, 0x23, 0x54, 0x51, 0x54, 0x5b, 0x31,
    0x1f, 0x75, 0x3b, 0xdc, 0xa9, 0x7f, 0xc8, 0x8e, 0x3e, 0x65, 0x26, 0x27, 0x45, 0xd2, 0xea, 0x51,
    0x0c, 0x5a, 0x73, 0x9b, 0x58, 0x3f, 0x59, 0xfa, 0x50, 0x16, 0xf7, 0x05, 0x5c, 0x36, 0x4e, 0x97,
    0xf2, 0x29, 0x6b, 0xe6, 0x82, 0xbb, 0x69, 0xde, 0x12, 0xe1, 0x34, 0x32, 0x3b, 0x7f, 0x07, 0x91,
    0xe9, 0x95, 0xe1, 0xac, 0x1a, 0x31, 0x6e, 0x1e, 0x13, 0x7d, 0xbe, 0xdf, 0x59, 0x02, 0x34, 0xf0,
    0x49, 0x16, 0x80, 0x3d, 0x99, 0x75, 0xa2, 0x04, 0xd6, 0xf6, 0xdb, 0xc2, 0xab, 0xdb, 0xa8, 0x2c,
    0x57, 0x56, 0xdb, 0xa1, 0xba, 0x1a, 0xce, 0x77, 0xbb, 0x10, 0x04, 0xfe, 0xcf, 0x41, 0x39, 0xe8,
    0xa9, 0x52, 0x32, 0x2a, 0xc8, 0x9e, 0x11, 0x8c, 0xc7, 0x7e, 0x0e, 0xd6, 0xc2, 0xf1, 0x3c, 0x19,
    0x43, 0x58, 0xb8, 0x62, 0xe0, 0x36, 0xff, 0x67, 0x76, 0x31, 0x1b, 0xf6, 0xe6, 0x4a, 0x02, 0xeb,
    0x22, 0x08, 0x8f, 0x5c, 0x6e, 0xb6, 0xb0, 0x19, 0x1e, 0xe6, 0x7c, 0x8d, 0x92, 0xcf, 0x00, 0x08,
    0xe2, 0xa0, 0xa8, 0x83, 0x27, 0xd6, 0x59, 0x09, 0x7c, 0x3e, 0x08, 0xac, 0xdf, 0xa5, 0x35, 0x18,
    0xfd, 0x89, 0x0a, 0x78, 0xbc, 0x26, 0xfa, 0xfe, 0x73, 0xfc, 0xb5, 0xc3, 0x67, 0xe0, 0x8a, 0x2e,
    0x9c, 0x05, 0x52, 0x30, 0xca, 0x81, 0x9e, 0x98, 0x25, 0xe5, 0x9e, 0x8b, 0xfe, 0xcb, 0x4f, 0x6e,
    0xce, 0x72, 0xec, 0x71, 0x04, 0x2b, 0xc6, 0x1a, 0x0f, 0x3c, 0x45, 0xc8, 0x43, 0x9c, 0x14, 0x25,
};
const std::array<uint8_t, 32 * TEST_VEC_LEN> enc_poly256_vec_ys = {
    0x46, 0x1c, 0xf4, 0xc4, 0x18, 0x8e, 0x77, 0xf1, 0xaa, 0xb9, 0x8b, 0xc8, 0x76, 0x45, 0xc1, 0x01,
    0xb9, 0xbf, 0x91, 0xac, 0xd0, 0xf4, 0x05, 0xa2, 0xe6, 0xb1, 0x79, 0x67, 0x42, 0x51, 0x3b, 0x46,
    0xb5, 0xdd, 0x44, 0x42, 0xaa, 0x02, 0xa9, 0xa2, 0x0e, 0x93, 0xf8, 0xdc, 0x2a, 0x86, 0xa3, 0x42,
    0x35, 0x94, 0x71, 0xae, 0x8a, 0xc9, 0x3d, 0xce, 0x0e, 0x5c, 0x90, 0xed, 0xa8, 0x7b, 0xd8, 0x96,
    0xb0, 0xfc, 0x6e, 0x1b, 0x7d, 0xf0, 0x60, 0x0b, 0xae, 0xf1, 0xa3, 0xf4, 0x5a, 0xf3, 0x3e, 0x1a,
    0xc1, 0x18, 0x48, 0x15, 0x92, 0x77, 0xa5, 0x59, 0x11, 0xdd, 0xa2, 0x9a, 0x09, 0x3d, 0x77, 0x4e,
    0xc4, 0xe6, 0x51, 0xb2, 0x3f, 0x42, 0x0b, 0x0d, 0xf0, 0x85, 0xa9, 0xc5, 0xb1, 0xff, 0x6e, 0x96,
    0x12, 0xc5, 0x72, 0x27, 0x17, 0xaf, 0x92, 0xb1, 0x94, 0x23, 0xbc, 0x67, 0x50, 0x3f, 0xfa, 0xf6,
    0x39, 0x82, 0x39, 0xa2, 0x8d, 0x2f, 0xc4, 0x9c, 0x6e, 0xbd, 0xac, 0xa2, 0x89, 0xba, 0x88, 0x0f,
    0x9a, 0x67, 0x69, 0x5a, 0xac, 0xa1, 0x5a, 0x50, 0x9e, 0xfa, 0x81, 0xc0, 0x72, 0x3b, 0xd3, 0xaf,
    0x6e, 0x66, 0x92, 0xe0, 0xa4, 0x2d, 0xba, 0x3c, 0x3a, 0x30, 0xd9, 0x27, 0x6d, 0x51, 0x3b, 0x1a,
    0xb1, 0xb1, 0x6c, 0x9a, 0x1c, 0x79, 0xd0, 0x93, 0xed, 0xfb, 0xc9, 0xd6, 0x3f, 0xb9, 0xfb, 0xf6,
    0x83, 0xb5, 0xb2, 0x51, 0x82, 0xfd, 0x28, 0x44, 0x7f, 0xbb, 0xe1, 0xee, 0xbb, 0xe3, 0x22, 0x72,
    0x33, 0xfe, 0x01, 0x01, 0x3b, 0xce, 0x65, 0x7b, 0x1f, 0x80, 0x98, 0x70, 0x76, 0xbf, 0xea, 0x5b,
    0x14, 0xc9, 0xb7, 0x47, 0xc0, 0x0b, 0x8a, 0xb7, 0xe9, 0xcc, 0x9a, 0x46, 0xb5, 0x4e, 0x7d, 0xe5,
    0x71, 0x07, 0x57, 0x81, 0x27, 0xde, 0x0d, 0x19, 0x13, 0xd4, 0x0e, 0xca, 0xc6, 0xcc, 0x41, 0x0a,
    0x24, 0x29, 0x4c, 0x78, 0xf6, 0xfe, 0x81, 0x9d, 0x6c, 0xe2, 0x05, 0x47, 0xc9, 0x83, 0xb2, 0xca,
    0x1f, 0x40, 0xd6, 0x51, 0xad, 0x8f, 0x50, 0x9a, 0xc4, 0x9e, 0x9d, 0xf6, 0xaa, 0x6f, 0x16, 0x3c,
    0xe3, 0xc1, 0x10, 0xa1, 0x60, 0xea, 0xc2, 0x91, 0x44, 0xdf, 0x89, 0xbe, 0x66, 0xec, 0x39, 0x59,
    0x8c, 0xb1, 0x3e, 0xa2, 0xee, 0x6d, 0x84, 0xf7, 0x9d, 0xf9, 0x50, 0xf1, 0xea, 0x0a, 0xe4, 0x38,
    0x57, 0x20, 0x55, 0x42, 0xee, 0x94, 0xcb, 0x49, 0xe4, 0x48, 0x88, 0x50, 0xad, 0xf3, 0x15, 0xe4,
    0xaf, 0x03, 0x70, 0x06, 0x1e, 0xa1, 0xfb, 0x5b, 0xa5, 0xd2, 0xa3, 0xa5, 0x67, 0x6b, 0x54, 0xa7,
    0x8c, 0x89, 0x43, 0x05, 0xf6, 0x12, 0x1b, 0xd8, 0xfa, 0xc4, 0xbd, 0x1a, 0x9c, 0x02, 0x20, 0x7b,
    0x70, 0x0e, 0x42, 0x39, 0xcb, 0xe3, 0x53, 0x0d, 0x4a, 0xb2, 0x6f, 0x74, 0x27, 0x33, 0x49, 0x08,
    0x64, 0x49, 0xa0, 0x52, 0xe2, 0x7a, 0xfd, 0xb1, 0xda, 0xce, 0x52, 0xa7, 0xb5, 0xe6, 0x9a, 0x0e,
    0xf3, 0xb9, 0x4b, 0x54, 0x35, 0x21, 0x66, 0x82, 0x21, 0x8f, 0x95, 0x59, 0x74, 0x77, 0x1a, 0x55,
    0x6d, 0x6a, 0xfb, 0xb4, 0xd7, 0xde, 0x42, 0x8b, 0x3e, 0xe6, 0x63, 0xcc, 0x7e, 0x41, 0xc5, 0x16,
    0xc8, 0xbd, 0xcd, 0x13, 0x49, 0x44, 0xd3, 0x98, 0xf2, 0x1b, 0x35, 0xa9, 0x61, 0x8f, 0x80, 0xbc,
    0xa9, 0x0e, 0x5c, 0xaf, 0x6f, 0x9e, 0x19, 0xa4, 0x94, 0x83, 0xe0, 0xd8, 0xa3, 0x66, 0x8f, 0xa0,
    0xa0, 0x2e, 0x4e, 0xe9, 0x26, 0x09, 0x8b, 0x5d, 0xae, 0x9f, 0x5b, 0xb9, 0x58, 0xf1, 0x2c, 0x5e,
    0x22, 0xbd, 0x56, 0xb6, 0x97, 0x25, 0x40, 0x82, 0x10, 0xf5, 0x19, 0xb8, 0x0f, 0x78, 0xb0, 0x97,
    0xa3, 0xa1, 0x60, 0x66, 0xc8, 0xd1, 0x29, 0x23, 0x39, 0x1f, 0x75, 0xa4, 0xf7, 0xb1, 0x36, 0x75,
};
const std::array<uint8_t, 32 * TEST_VEC_LEN> enc_poly256_vec_sums = {
    0x44, 0xb1, 0x70, 0x9f, 0xde, 0xa5, 0x17, 0xeb, 0x24, 0x29, 0x73, 0x67, 0x8f, 0x10, 0xf8, 0xe0,
    0x04, 0xf2, 0x65, 0xc1, 0xad, 0xa6, 0x80, 0x45, 0x8b, 0xe4, 0x98, 0xf5, 0x78, 0x61, 0x3d, 0xae,
    0x18, 0x49, 0x01, 0x6e, 0x37, 0xc3, 0x5c, 0xcc, 0x6e, 0xe6, 0x15, 0x87, 0x30, 0x37, 0x9d, 0x94,
    0xd9, 0x4e, 0x51, 0x31, 0xb6, 0xe2, 0x68, 0xb2, 0x76, 0x31, 0x81, 0xae, 0x5a, 0x26, 0xf2, 0x5a,
    0x0a, 0xa1, 0x9b, 0x45, 0x66, 0xdd, 0xdf, 0xa1, 0x62, 0x9e, 0xc4, 0x92, 0xc7, 0x8d, 0x1a, 0x29,
    0x21, 0x99, 0x2d, 0x90, 0xe0, 0xaa, 0x43, 0xd1, 0xb4, 0xdd, 0xe7, 0xf1, 0xea, 0x3d, 0xf6, 0xdb,
    0x92, 0x5c, 0x70, 0xa2, 0x48, 0x6d, 0x50, 0xf5, 0x61, 0x43, 0xbc, 0x59, 0x95, 0x8e, 0x62, 0xda,
    0xf4, 0x5b, 0x13, 0xa6, 0x86, 0x4a, 0x95, 0xd1, 0xbb, 0xc4, 0x38, 0xbf, 0x66, 0xbd, 0x8b, 0x2f,
    0xf0, 0xa5, 0xd0, 0x3c, 0x92, 0x38, 0x6a, 0x5e, 0xa4, 0x91, 0xa7, 0x56, 0xc9, 0x9d, 0xed, 0x06,
    0x72, 0xc7, 0x0f, 0x9b, 0xe8, 0x09, 0xed, 0x3c, 0x49, 0x1a, 0x05, 0x60, 0xff, 0x2b, 0x28, 0x6f,
    0xd8, 0xf4, 0x09, 0x1c, 0x4f, 0x45, 0x04, 0x2f, 0x52, 0x4f, 0x9b, 0xd3, 0x62, 0x71, 0x8e, 0x5d,
    0x5a, 0x28, 0xcb, 0x82, 0xe1, 0xdd, 0x22, 0xa0, 0x0c, 0x89, 0xa6, 0x15, 0xb9, 0xd8, 0x49, 0x7c,
    0x92, 0x34, 0x41, 0xb3, 0x50, 0xf4, 0xae, 0x08, 0x90, 0x54, 0xa4, 0xf6, 0xad, 0x63, 0xab, 0x40,
    0x74, 0xd9, 0xed, 0xd5, 0xbb, 0x5d, 0xae, 0x7d, 0xdb, 0xb6, 0x07, 0x41, 0x09, 0x40, 0xf5, 0xdb,
    0x83, 0xc4, 0xaf, 0x11, 0xc4, 0xc6, 0xc4, 0x88, 0x40, 0x74, 0x8b, 0xc1, 0x2e, 0xd4, 0x49, 0xd8,
    0x09, 0xbe, 0x51, 0x5f, 0xd2, 0xf1, 0xe0, 0x37, 0x87, 0xc8, 0xcb, 0xd1, 0xba, 0xc7, 0x47, 0x1c,
    0x90, 0x56, 0xab, 0xfe, 0xf7, 0x3b, 0x33, 0x86, 0xc3, 0xa7, 0x46, 0xda, 0xed, 0x6a, 0x7f, 0xac,
    0xe9, 0x75, 0xef, 0x44, 0x97, 0xce, 0x4f, 0xd9, 0x6c, 0x59, 0xb4, 0xca, 0x84, 0xac, 0xba, 0xda,
    0xb3, 0x7d, 0x99, 0x5f, 0x8e, 0x05, 0xee, 0x4e, 0x10, 0xb2, 0xaa, 0xea, 0x37, 0xb8, 0x62, 0x68,
    0x93, 0xc4, 0x05, 0x7e, 0x47, 0x12, 0x4c, 0x79, 0xa3, 0x9c, 0x76, 0xd6, 0xaf, 0xd8, 0x0e, 0x69,
    0x5b, 0x7a, 0x26, 0xd9, 0xb6, 0xab, 0x92, 0xb3, 0xb4, 0x5e, 0x7f, 0x55, 0xf1, 0xc5, 0x5b, 0x73,
    0x5d, 0x2a, 0x1b, 0xe0, 0x9c, 0x1a, 0x92, 0x85, 0xb7, 0x33, 0x97, 0x97, 0x5c, 0x14, 0x53, 0x36,
    0x65, 0x1c, 0xa2, 0xa9, 0xec, 0x23, 0x75, 0xc6, 0xe9, 0xb9, 0x03, 0xc5, 0xc5, 0x00, 0x14, 0x8b,
    0x39, 0x18, 0xc2, 0x04, 0x52, 0x96, 0xf1, 0x09, 0x9c, 0x44, 0xb4, 0xb6, 0x8c, 0xe8, 0xe1, 0x24,
    0x33, 0x1f, 0x7b, 0xf3, 0x58, 0x60, 0x33, 0xc6, 0x61, 0xde, 0x56, 0x59, 0x7a, 0xa7, 0xa3, 0xe6,
    0x5a, 0xeb, 0x79, 0x7e, 0xfd, 0xbf, 0x77, 0x0e, 0xe6, 0xf1, 0x9b, 0x8f, 0xb6, 0x86, 0x26, 0x4c,
    0x2e, 0x32, 0x43, 0xd6, 0x37, 0xe8, 0xbd, 0xec, 0x48, 0xd7, 0x78, 0x3a, 0x98, 0x0b, 0xc7, 0xfd,
    0xea, 0xb5, 0x42, 0x4f, 0x27, 0xf2, 0x63, 0x81, 0xec, 0xfd, 0x49, 0x24, 0xf3, 0x40, 0x80, 0xb4,
    0x4b, 0xae, 0xf4, 0x2c, 0x48, 0x48, 0x40, 0xad, 0xe8, 0xbd, 0xe8, 0x74, 0x7c, 0xc3, 0xba, 0xb8,
    0x5d, 0xa7, 0x44, 0x91, 0x9a, 0x2f, 0x71, 0xa3, 0xdd, 0x63, 0xee, 0x7a, 0x3f, 0x11, 0xa6, 0x70,
    0xbe, 0xb8, 0x04, 0x86, 0x5d, 0xa4, 0xde, 0x1a, 0x35, 0x10, 0x87, 0x33, 0xf1, 0xb3, 0xff, 0xf9,
    0x6d, 0xd3, 0x8c, 0x17, 0xcc, 0xfa, 0xef, 0x39, 0x36, 0x23, 0x30, 0x6c, 0xb4, 0x2d, 0x22, 0x50,
};
const std::array<uint8_t, 2 * 32 * TEST_VEC_LEN> enc_poly256_vec_unreduced_products = {
    0x8c, 0x96, 0xd4, 0xc8, 0xfc, 0x09, 0xc0, 0x00, 0x28, 0xd9, 0xf9, 0x56, 0xe3, 0x83, 0x8b, 0xaf,
    0x81, 0xfe, 0xeb, 0xe7, 0x20, 0x79, 0xaf, 0x04, 0x2a, 0x05, 0xa1, 0xd0, 0xfb, 0x09, 0xe0, 0xeb,
    0x5f, 0x98, 0x50, 0x33, 0x0d, 0x52, 0x84, 0xc6, 0x83, 0x2c, 0xb2, 0xbf, 0x60, 0x20, 0xf9, 0x4c,
    0x3e, 0x45, 0xe6, 0xbf, 0x9f, 0x02, 0xd2, 0xcf, 0xda, 0x0f, 0xbc, 0xf3, 0x62, 0x54, 0x64, 0x38,
    0xe9, 0x2e, 0xd2, 0x19, 0x63, 0x77, 0x38, 0x5d, 0xd1, 0x99, 0x37, 0x95, 0xe4, 0x39, 0xd5, 0x15,
    0xea, 0xb1, 0x33, 0x6f, 0x78, 0x83, 0x93, 0x46, 0x66, 0x0d, 0xbe, 0xc5, 0x28, 0xba, 0x7b, 0x4e,
    0x18, 0x28, 0x91, 0xaa, 0x46, 0xbc, 0xda, 0x57, 0xe4, 0x89, 0x17, 0x80, 0x1b, 0x1f, 0x58, 0x24,
    0x52, 0x55, 0x60, 0xed, 0x77, 0x70, 0x47, 0xfb, 0x2d, 0xbc, 0x7a, 0x70, 0xa5, 0xeb, 0x20, 0x68,
    0xe0, 0xe9, 0x98, 0x74, 0x50, 0xf8, 0x1e, 0x53, 0xca, 0x29, 0x66, 0x1b, 0x06, 0xd8, 0x2f, 0x3c,
    0x38, 0x66, 0x5f, 0x7f, 0xe6, 0xd6, 0x50, 0x96, 0x85, 0xe8, 0xe0, 0xb3, 0xc5, 0xee, 0xa8, 0x2d,
    0xfe, 0xb2, 0x17, 0x29, 0xfe, 0xb7, 0x17, 0x43, 0x48, 0x85, 0x86, 0xe1, 0xf2, 0x53, 0x11, 0x5e,
    0x27, 0x55, 0x17, 0xa0, 0x70, 0x2e, 0xc6, 0x95, 0xb9, 0x63, 0x00, 0x60, 0x49, 0x33, 0x8c, 0x22,
    0xd8, 0xe3, 0xea, 0x9f, 0xba, 0xd9, 0xc1, 0xb1, 0xb2, 0x72, 0xf2, 0xff, 0x5b, 0x6c, 0x24, 0xcd,
    0x0a, 0x44, 0x78, 0x97, 0x97, 0x80, 0x69, 0xc4, 0x7d, 0x8b, 0x80, 0xf3, 0x1d, 0x19, 0x8e, 0x8c,
    0xe1, 0x51, 0x82, 0xb7, 0x2a, 0xd9, 0x0d, 0xcf, 0x11, 0x1e, 0x82, 0xf6, 0x14, 0xaa, 0xa3, 0xe5,
    0xcd, 0x1c, 0x44, 0x7b, 0x9a, 0xce, 0x93, 0x77, 0x62, 0x93, 0x1e, 0x28, 0x5e, 0x9a, 0xc1, 0x4e,
    0x31, 0x8e, 0x8c, 0xb5, 0xc1, 0x87, 0x62, 0xa0, 0x7c, 0xd2, 0x3c, 0x0d, 0x99, 0xd9, 0xdb, 0xf2,
    0x25, 0x10, 0x63, 0xf9, 0xb8, 0x5a, 0x5b, 0xdf, 0xc5, 0x26, 0x74, 0x1c, 0x0b, 0x81, 0x67, 0x7f,
    0x67, 0xa3, 0x48, 0x16, 0x2a, 0xc7, 0xcb, 0xa3, 0xd3, 0x00, 0x4b, 0x82, 0x9e, 0xbe, 0x88, 0xa1,
    0xcb, 0xf0, 0x48, 0xa3, 0xbf, 0x31, 0x08, 0x22, 0x15, 0xe3, 0xaf, 0x0c, 0x23, 0xcd, 0x7a, 0x7c,
    0x44, 0xf5, 0x8b, 0x80, 0xe6, 0x91, 0xa8, 0xc3, 0x5b, 0xa8, 0xb5, 0xa6, 0xed, 0x8a, 0xca, 0x58,
    0xb5, 0x0b, 0x8e, 0xb6, 0x86, 0x4f, 0x26, 0x76, 0xbe, 0x35, 0x5e, 0xfd, 0x44, 0xd0, 0x6b, 0x47,
    0x1b, 0x02, 0xf2, 0xa2, 0x82, 0x90, 0x0c, 0x60, 0xfe, 0xb3, 0xce, 0xcc, 0xb4, 0xe4, 0x81, 0x01,
    0x87, 0x87, 0x6a, 0x5f, 0xc6, 0x9d, 0x35, 0x59, 0xc0, 0x61, 0x06, 0x5d, 0x2d, 0xf5, 0x4c, 0x7d,
    0xb3, 0xee, 0x78, 0x13, 0x7e, 0x28, 0xc4, 0xef, 0x86, 0x13, 0xdc, 0x6c, 0x7f, 0xaf, 0x70, 0x68,
    0xa8, 0x68, 0xb1, 0xdf, 0xb8, 0xa6, 0xc7, 0x6f, 0xbe, 0x71, 0x53, 0xd5, 0xb5, 0xd9, 0x4b, 0x38,
    0xa6, 0x16, 0x3f, 0x4a, 0x28, 0xaf, 0x16, 0x2a, 0x13, 0x72, 0x21, 0x24, 0xa7, 0xf7, 0x4e, 0x72,
    0x3f, 0xbf, 0xb9, 0x24, 0xaf, 0x4d, 0x3b, 0x96, 0x59, 0x6e, 0x43, 0xaf, 0x5b, 0x8b, 0xf3, 0x2d,
    0x2c, 0x80, 0xda, 0x41, 0xf2, 0x14, 0x05, 0x56, 0x92, 0xee, 0xec, 0x36, 0xc2, 0x1e, 0xff, 0x87,
    0x19, 0x42, 0xb8, 0x4f, 0xa0, 0x21, 0x1b, 0xa7, 0x98, 0x34, 0x15, 0x9d, 0x6c, 0x5b, 0x89, 0x20,
    0xbf, 0x24, 0x5d, 0xd2, 0x5e, 0x76, 0x65, 0xb5, 0x31, 0xca, 0xb8, 0x66, 0x54, 0xd2, 0x45, 0xc0,
    0xce, 0x96, 0x2e, 0xd1, 0x8f, 0x35, 0x5e, 0xd9, 0x4d, 0x79, 0x09, 0x9b, 0xad, 0xa5, 0x99, 0x00,
    0x50, 0x9c, 0x76, 0x7a, 0x47, 0x83, 0x50, 0x82, 0xb8, 0x3a, 0x70, 0x3e, 0x32, 0xf7, 0xc8, 0xa7,
    0xca, 0x27, 0x77, 0x4a, 0xce, 0xc1, 0x7b, 0x78, 0xfa, 0x46, 0x3b, 0x56, 0x0d, 0x89, 0x5b, 0x6c,
    0x85, 0x91, 0xf3, 0x15, 0x9b, 0x5b, 0xb2, 0x18, 0xd0, 0x6f, 0x42, 0x92, 0x21, 0x9a, 0x64, 0xd2,
    0x29, 0x47, 0x53, 0x1a, 0xb6, 0x94, 0x6d, 0x49, 0xa8, 0x7b, 0x05, 0xfc, 0xf7, 0x9c, 0x1c, 0x16,
    0xf0, 0x22, 0x9c, 0x99, 0xb1, 0xd9, 0x17, 0xb6, 0x7a, 0x6b, 0x19, 0xa3, 0x61, 0x1c, 0xa7, 0x44,
    0x28, 0x79, 0x4d, 0xdc, 0x3b, 0x93, 0x17, 0xd3, 0x65, 0x64, 0x40, 0xa6, 0x2e, 0x30, 0x2b, 0xf3,
    0xfe, 0x87, 0xe8, 0xcf, 0x28, 0x5c, 0xd7, 0x00, 0x31, 0x8c, 0x78, 0x68, 0xa2, 0x8b, 0xdc, 0xca,
    0x65, 0x6a, 0x6e, 0x7c, 0x37, 0x20, 0xfb, 0x92, 0xc1, 0x40, 0x1b, 0x43, 0xca, 0x56, 0x9b, 0x0d,
    0xe4, 0x25, 0x06, 0xc9, 0xe8, 0x19, 0xdc, 0x8c, 0x40, 0xfe, 0x83, 0xe9, 0xa1, 0x2d, 0xa4, 0xde,
    0xe0, 0xb0, 0xd0, 0x91, 0x84, 0x80, 0x34, 0x3a, 0xce, 0xd2, 0xdc, 0x2b, 0xad, 0xdf, 0xe8, 0x18,
    0x0d, 0x2e, 0x6d, 0x6b, 0x44, 0x51, 0xad, 0x64, 0xfa, 0x42, 0x5c, 0x1d, 0x92, 0x68, 0xdc, 0x90,
    0xef, 0xf4, 0x24, 0xa5, 0xa2, 0x1e, 0x4c, 0x06, 0xa6, 0x50, 0x09, 0x53, 0xdd, 0x62, 0x7b, 0x59,
    0x6c, 0x2d, 0xf5, 0x0a, 0xd1, 0xa1, 0x29, 0xa2, 0x22, 0x55, 0x0d, 0x7b, 0x02, 0x99, 0xce, 0x22,
    0x60, 0x3c, 0x34, 0x2c, 0xed, 0xcd, 0xb6, 0x07, 0x6f, 0xa6, 0x3c, 0x47, 0x65, 0x5a, 0xf3, 0x10,
    0x51, 0xd6, 0xde, 0x87, 0x4d, 0xdc, 0xde, 0x34, 0xc2, 0x96, 0xb7, 0xe7, 0xfe, 0x5c, 0xba, 0x84,
    0xf2, 0xe8, 0x85, 0x0d, 0xf8, 0x0c, 0x23, 0x99, 0x77, 0xfd, 0x39, 0x83, 0x2a, 0x22, 0x6f, 0x01,
    0x7c, 0x29, 0xc3, 0xe1, 0x5c, 0xca, 0xd5, 0xfe, 0x67, 0xb1, 0x57, 0x16, 0xdf, 0x3d, 0x95, 0x35,
    0x90, 0x5b, 0xe6, 0x73, 0x3e, 0x46, 0xb7, 0xae, 0x60, 0x62, 0x22, 0xba, 0xe7, 0x5c, 0x01, 0xb4,
    0xa9, 0xbd, 0x6c, 0xfd, 0x9f, 0x1f, 0x7d, 0x54, 0xc2, 0x62, 0x42, 0x24, 0xe7, 0x63, 0x53, 0x0b,
    0x91, 0xc5, 0xeb, 0xfd, 0xbb, 0xfa, 0x7a, 0xdf, 0xe9, 0x7a, 0xcd, 0x63, 0xbb, 0x50, 0xa0, 0x07,
    0xf7, 0xdd, 0x21, 0xe0, 0x94, 0x48, 0xb3, 0x22, 0xb9, 0x50, 0xce, 0x2a, 0xd5, 0x0a, 0x06, 0xa7,
    0x02, 0x0f, 0x2c, 0xde, 0x2e, 0x36, 0xe1, 0x69, 0x38, 0x2b, 0xbc, 0x73, 0x0c, 0x81, 0x47, 0x3b,
    0x9e, 0x5e, 0xf4, 0x27, 0x99, 0xb9, 0x3d, 0x9d, 0x0f, 0x65, 0x3c, 0x2e, 0x0c, 0xf3, 0xbe, 0xd9,
    0x8a, 0x7b, 0x47, 0xa6, 0xcd, 0x2c, 0x83, 0x42, 0x20, 0xad, 0x66, 0x46, 0x9c, 0x73, 0xe4, 0x05,
    0xb2, 0x96, 0x54, 0xc5, 0x0d, 0xf9, 0x45, 0x22, 0x60, 0xf8, 0xda, 0x38, 0x36, 0xb8, 0x4a, 0x0b,
    0x51, 0x94, 0x70, 0xbb, 0x88, 0xab, 0xc4, 0x6d, 0xd8, 0xf8, 0x20, 0x04, 0xc8, 0xf6, 0x46, 0x78,
    0x73, 0x29, 0x3a, 0x37, 0x92, 0x7e, 0x39, 0xc2, 0x4f, 0x48, 0x99, 0xcd, 0x19, 0x25, 0x55, 0x95,
    0x57, 0x43, 0xfd, 0x12, 0x6c, 0xff, 0xad, 0xc6, 0xfa, 0xbe, 0xb4, 0xf3, 0x85, 0x7b, 0xdd, 0x08,
    0xb8, 0xf4, 0x77, 0xa9, 0xe7, 0xa9, 0x8d, 0xd9, 0x6a, 0x8a, 0x7e, 0x63, 0x87, 0x7a, 0x95, 0x93,
    0xde, 0xa6, 0x40, 0xbe, 0xed, 0x67, 0x7c, 0xad, 0x08, 0x8f, 0x73, 0xb2, 0xe1, 0x06, 0xb5, 0x61,
    0x4d, 0xfe, 0x7c, 0xe9, 0xf6, 0x9c, 0xc7, 0xfb, 0xba, 0x4a, 0x78, 0x5e, 0x3b, 0x3b, 0xea, 0x6f,
    0xea, 0x13, 0x72, 0x12, 0xc9, 0xa2, 0x21, 0x9c, 0xfc, 0x16, 0x27, 0xaf, 0x51, 0x82, 0x01, 0x0f,
};
const std::array<uint8_t, 32 * TEST_VEC_LEN> enc_poly256_vec_products = {
    0xf1, 0x9f, 0xb7, 0x1e, 0xae, 0x66, 0x97, 0x1d, 0xc6, 0xd8, 0x74, 0x29, 0xe8, 0xac, 0x33, 0xab,
    0xbc, 0xf1, 0x48, 0xc2, 0xc9, 0x5c, 0x7f, 0x46, 0xfd, 0xa5, 0x53, 0x6a, 0x82, 0x0b, 0xce, 0xaf,
    0x0d, 0x47, 0x84, 0x0f, 0x40, 0xa8, 0x2e, 0xc4, 0x71, 0x9a, 0xa8, 0x49, 0xe1, 0xd7, 0x92, 0x4b,
    0x25, 0x53, 0x8d, 0x1a, 0x98, 0xe3, 0xe6, 0x25, 0xae, 0x73, 0x89, 0x91, 0x77, 0x1e, 0x6b, 0x01,
    0x50, 0x1c, 0xee, 0x85, 0x37, 0x97, 0x7e, 0x20, 0xa7, 0x31, 0x3f, 0x56, 0xe5, 0x71, 0x1e, 0x9d,
    0x11, 0x5e, 0xab, 0x00, 0xc0, 0x4d, 0xf2, 0xf4, 0xbf, 0x94, 0x63, 0x52, 0x05, 0x5c, 0x5f, 0xe4,
    0x02, 0xa2, 0x68, 0x0f, 0xb2, 0xeb, 0x24, 0x94, 0xe1, 0x91, 0x43, 0x0b, 0x58, 0x7f, 0xd4, 0x84,
    0xda, 0x85, 0xdc, 0x79, 0xc6, 0xce, 0xf6, 0xd0, 0x06, 0xb0, 0x7b, 0x02, 0x5e, 0xd9, 0x13, 0x27,
    0xc9, 0x95, 0x78, 0x11, 0x58, 0x11, 0xe2, 0xda, 0x1a, 0x85, 0x38, 0xe3, 0xa4, 0x34, 0x9c, 0xc6,
    0x32, 0x14, 0xd5, 0x9d, 0x80, 0x64, 0xb3, 0x14, 0xa8, 0x7f, 0x14, 0x08, 0xf7, 0x50, 0x9b, 0x96,
    0x24, 0x05, 0xfe, 0x3f, 0xb1, 0x59, 0x46, 0x10, 0x10, 0x52, 0x58, 0xfa, 0x20, 0xb9, 0xe2, 0x68,
    0xc8, 0x7e, 0x00, 0xd3, 0xef, 0x04, 0x01, 0xbb, 0x10, 0xea, 0x0a, 0x6d, 0x03, 0xe1, 0x5e, 0x55,
    0x77, 0x32, 0x01, 0xca, 0xd6, 0x7f, 0xe1, 0x75, 0x14, 0xa7, 0x9e, 0xd9, 0x30, 0xee, 0x05, 0xa1,
    0x4d, 0x31, 0x25, 0x18, 0xdd, 0xd4, 0x4e, 0x8b, 0xeb, 0x0b, 0xc9, 0x22, 0x48, 0x7a, 0x2a, 0xd2,
    0xc5, 0x55, 0xc5, 0xe5, 0x44, 0x0b, 0x82, 0x0f, 0x86, 0x8c, 0x86, 0xfe, 0xd1, 0x9e, 0x5e, 0x59,
    0x35, 0x6d, 0xa5, 0x45, 0xae, 0x4c, 0x2d, 0x48, 0x3c, 0xb6, 0xf3, 0x2e, 0xa8, 0x6b, 0xd4, 0x57,
    0x13, 0x0d, 0x7e, 0x48, 0x85, 0xa9, 0x0e, 0x27, 0x49, 0x50, 0xc9, 0xa4, 0xee, 0xc7, 0xc5, 0xe2,
    0x37, 0x3e, 0x1d, 0x3e, 0x0a, 0x49, 0x40, 0x8f, 0xdf, 0x07, 0x6a, 0xcf, 0x2a, 0x27, 0xd5, 0x93,
    0x3d, 0x67, 0xd9, 0x36, 0x1c, 0xd3, 0x06, 0xf2, 0xac, 0x95, 0xa2, 0x87, 0xa6, 0x44, 0xb6, 0x8c,
    0x48, 0x61, 0xfe, 0x65, 0xcf, 0xe8, 0xe4, 0xb9, 0xdb, 0x39, 0x5d, 0xe7, 0x89, 0xcd, 0xec, 0x16,
    0x4e, 0xd3, 0xc7, 0xd6, 0x9d, 0x34, 0x2b, 0x5a, 0x8d, 0x01, 0x2d, 0x5b, 0x4d, 0xbd, 0x26, 0x67,
    0x00, 0xb4, 0x2a, 0x97, 0x6c, 0xba, 0xb1, 0xdc, 0x29, 0x4c, 0x98, 0x70, 0xe3, 0x18, 0x99, 0xe6,
    0xe8, 0x38, 0xd3, 0x12, 0x05, 0xb3, 0x26, 0xa5, 0x7d, 0x48, 0xcd, 0x2a, 0x45, 0xd2, 0xa5, 0xca,
    0x1a, 0xa3, 0xb8, 0xb0, 0xc2, 0x8d, 0x4b, 0x52, 0x51, 0xde, 0x28, 0x48, 0xb9, 0x1f, 0x4c, 0x85,
    0xf7, 0x08, 0x7c, 0xf6, 0xb6, 0x27, 0x81, 0x80, 0xb7, 0x09, 0xdb, 0x22, 0xd1, 0x31, 0x68, 0x34,
    0x49, 0x7e, 0xcc, 0x6b, 0xe2, 0xee, 0x93, 0x08, 0x68, 0x09, 0x9e, 0x1a, 0x52, 0xb4, 0x68, 0xd8,
    0x7a, 0x0c, 0xf5, 0x77, 0xd2, 0x40, 0x29, 0x9a, 0x0f, 0x3e, 0x1b, 0x8a, 0xd4, 0x64, 0x51, 0xd4,
    0x9e, 0xc0, 0x77, 0x34, 0xf8, 0x06, 0xb8, 0x7d, 0x9b, 0x17, 0x21, 0x7a, 0x70, 0x3e, 0x72, 0x04,
    0x87, 0x74, 0x66, 0x21, 0x4d, 0xe7, 0x4c, 0x4a, 0xe0, 0xa7, 0x2e, 0x15, 0x47, 0xcd, 0x7b, 0x35,
    0xff, 0xee, 0xdd, 0x48, 0x9d, 0xf4, 0x9c, 0xd3, 0x8b, 0x89, 0x2a, 0x9d, 0x2a, 0x04, 0xaf, 0x3d,
    0x08, 0xfd, 0x9e, 0x39, 0xb2, 0x03, 0xd4, 0xab, 0x8b, 0x56, 0xc4, 0x6a, 0x43, 0x27, 0x7c, 0x16,
    0x6f, 0x2e, 0xf7, 0x63, 0x6b, 0x33, 0x64, 0x43, 0xe5, 0xef, 0x71, 0xd9, 0x7f, 0x81, 0x8b, 0xb4,
};


TEST_CASE( "poly64 load and store", "[polynomial]" ) {
    std::array<uint8_t, 8 * POLY_VEC_LEN> tmp = {0};
    for (size_t offset = 0; offset < enc_poly64_vec_xs.size(); offset += 8 * POLY_VEC_LEN) {
        poly64_vec a = poly64_load(enc_poly64_vec_xs.data() + offset);
        poly64_store(tmp.data(), a);
        REQUIRE( memcmp(tmp.data(), enc_poly64_vec_xs.data() + offset, 8 * POLY_VEC_LEN) == 0 );
    }
}

TEST_CASE( "poly64 eq", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly64_vec_xs.size(); offset += 8 * POLY_VEC_LEN) {
        poly64_vec a = poly64_load(enc_poly64_vec_xs.data() + offset);
        poly64_vec b = poly64_load(enc_poly64_vec_ys.data() + offset);
        REQUIRE_POLY64VEC_EQ( a, a );
        REQUIRE_POLY64VEC_EQ( b, b );
        REQUIRE_POLY64VEC_NEQ( a, b );
        REQUIRE_POLY64VEC_NEQ( b, a );
    }
}

TEST_CASE( "poly64 add", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly64_vec_xs.size(); offset += 8 * POLY_VEC_LEN) {
        poly64_vec a = poly64_load(enc_poly64_vec_xs.data() + offset);
        poly64_vec b = poly64_load(enc_poly64_vec_ys.data() + offset);
        poly64_vec sum = poly64_load(enc_poly64_vec_sums.data() + offset);
        REQUIRE_POLY64VEC_EQ( poly64_add(a, b), sum );
        REQUIRE_POLY64VEC_EQ( poly64_add(b, a), sum );
    }
}

TEST_CASE( "poly64 mul", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly64_vec_xs.size(); offset += 8 * POLY_VEC_LEN) {
        poly64_vec a = poly64_load(enc_poly64_vec_xs.data() + offset);
        poly64_vec b = poly64_load(enc_poly64_vec_ys.data() + offset);
        poly128_vec unreduced_product = poly128_load(enc_poly64_vec_unreduced_products.data() + 2 * offset);
        REQUIRE_POLY128VEC_EQ( poly64_mul(a, b), unreduced_product );
        REQUIRE_POLY128VEC_EQ( poly64_mul(b, a), unreduced_product );
    }
}

TEST_CASE( "poly64 mul/reduce", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly64_vec_xs.size(); offset += 8 * POLY_VEC_LEN) {
        poly64_vec a = poly64_load(enc_poly64_vec_xs.data() + offset);
        poly64_vec b = poly64_load(enc_poly64_vec_ys.data() + offset);
        poly64_vec product = poly64_load(enc_poly64_vec_products.data() + offset);
        REQUIRE_POLY64VEC_EQ( poly128_reduce64(poly64_mul(a, b)), product );
        REQUIRE_POLY64VEC_EQ( poly128_reduce64(poly64_mul(b, a)), product );
    }
}


TEST_CASE( "poly128 load and store", "[polynomial]" ) {
    std::array<uint8_t, 16 * POLY_VEC_LEN> tmp = {0};
    for (size_t offset = 0; offset < enc_poly128_vec_xs.size(); offset += 16 * POLY_VEC_LEN) {
        poly128_vec a = poly128_load(enc_poly128_vec_xs.data() + offset);
        poly128_store(tmp.data(), a);
        REQUIRE( memcmp(tmp.data(), enc_poly128_vec_xs.data() + offset, 16 * POLY_VEC_LEN) == 0 );
    }
}

TEST_CASE( "poly128 eq", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly128_vec_xs.size(); offset += 16 * POLY_VEC_LEN) {
        poly128_vec a = poly128_load(enc_poly128_vec_xs.data() + offset);
        poly128_vec b = poly128_load(enc_poly128_vec_ys.data() + offset);
        REQUIRE_POLY128VEC_EQ( a, a );
        REQUIRE_POLY128VEC_EQ( b, b );
        REQUIRE_POLY128VEC_NEQ( a, b );
        REQUIRE_POLY128VEC_NEQ( b, a );
    }
}

TEST_CASE( "poly128 add", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly128_vec_xs.size(); offset += 16 * POLY_VEC_LEN) {
        poly128_vec a = poly128_load(enc_poly128_vec_xs.data() + offset);
        poly128_vec b = poly128_load(enc_poly128_vec_ys.data() + offset);
        poly128_vec sum = poly128_load(enc_poly128_vec_sums.data() + offset);
        REQUIRE_POLY128VEC_EQ( poly128_add(a, b), sum );
        REQUIRE_POLY128VEC_EQ( poly128_add(b, a), sum );
    }
}

TEST_CASE( "poly128 mul", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly128_vec_xs.size(); offset += 16 * POLY_VEC_LEN) {
        poly128_vec a = poly128_load(enc_poly128_vec_xs.data() + offset);
        poly128_vec b = poly128_load(enc_poly128_vec_ys.data() + offset);
        poly256_vec unreduced_product = poly256_load(enc_poly128_vec_unreduced_products.data() + 2 * offset);
        REQUIRE_POLY256VEC_EQ( poly128_mul(a, b), unreduced_product );
        REQUIRE_POLY256VEC_EQ( poly128_mul(b, a), unreduced_product );
    }
}

TEST_CASE( "poly128 mul/reduce", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly128_vec_xs.size(); offset += 16 * POLY_VEC_LEN) {
        poly128_vec a = poly128_load(enc_poly128_vec_xs.data() + offset);
        poly128_vec b = poly128_load(enc_poly128_vec_ys.data() + offset);
        poly128_vec product = poly128_load(enc_poly128_vec_products.data() + offset);
        REQUIRE_POLY128VEC_EQ( poly256_reduce128(poly128_mul(a, b)), product );
        REQUIRE_POLY128VEC_EQ( poly256_reduce128(poly128_mul(b, a)), product );
    }
}


TEST_CASE( "poly192 load and store", "[polynomial]" ) {
    std::array<uint8_t, 24 * POLY_VEC_LEN> tmp = {0};
    for (size_t offset = 0; offset < enc_poly192_vec_xs.size(); offset += 24 * POLY_VEC_LEN) {
        poly192_vec a = poly192_load(enc_poly192_vec_xs.data() + offset);
        poly192_store(tmp.data(), a);
        REQUIRE( memcmp(tmp.data(), enc_poly192_vec_xs.data() + offset, 24 * POLY_VEC_LEN) == 0 );
    }
}

TEST_CASE( "poly192 eq", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly192_vec_xs.size(); offset += 24 * POLY_VEC_LEN) {
        poly192_vec a = poly192_load(enc_poly192_vec_xs.data() + offset);
        poly192_vec b = poly192_load(enc_poly192_vec_ys.data() + offset);
        REQUIRE_POLY192VEC_EQ( a, a );
        REQUIRE_POLY192VEC_EQ( b, b );
        REQUIRE_POLY192VEC_NEQ( a, b );
        REQUIRE_POLY192VEC_NEQ( b, a );
    }
}

TEST_CASE( "poly192 add", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly192_vec_xs.size(); offset += 24 * POLY_VEC_LEN) {
        poly192_vec a = poly192_load(enc_poly192_vec_xs.data() + offset);
        poly192_vec b = poly192_load(enc_poly192_vec_ys.data() + offset);
        poly192_vec sum = poly192_load(enc_poly192_vec_sums.data() + offset);
        REQUIRE_POLY192VEC_EQ( poly192_add(a, b), sum );
        REQUIRE_POLY192VEC_EQ( poly192_add(b, a), sum );
    }
}

TEST_CASE( "poly192 mul", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly192_vec_xs.size(); offset += 24 * POLY_VEC_LEN) {
        poly192_vec a = poly192_load(enc_poly192_vec_xs.data() + offset);
        poly192_vec b = poly192_load(enc_poly192_vec_ys.data() + offset);
        poly384_vec unreduced_product = poly384_load(enc_poly192_vec_unreduced_products.data() + 2 * offset);
        REQUIRE_POLY384VEC_EQ( poly192_mul(a, b), unreduced_product );
        REQUIRE_POLY384VEC_EQ( poly192_mul(b, a), unreduced_product );
    }
}

TEST_CASE( "poly192 mul/reduce", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly192_vec_xs.size(); offset += 24 * POLY_VEC_LEN) {
        poly192_vec a = poly192_load(enc_poly192_vec_xs.data() + offset);
        poly192_vec b = poly192_load(enc_poly192_vec_ys.data() + offset);
        poly192_vec product = poly192_load(enc_poly192_vec_products.data() + offset);
        REQUIRE_POLY192VEC_EQ( poly384_reduce192(poly192_mul(a, b)), product );
        REQUIRE_POLY192VEC_EQ( poly384_reduce192(poly192_mul(b, a)), product );
    }
}


TEST_CASE( "poly256 load and store", "[polynomial]" ) {
    std::array<uint8_t, 32 * POLY_VEC_LEN> tmp = {0};
    for (size_t offset = 0; offset < enc_poly256_vec_xs.size(); offset += 32 * POLY_VEC_LEN) {
        poly256_vec a = poly256_load(enc_poly256_vec_xs.data() + offset);
        poly256_store(tmp.data(), a);
        REQUIRE( memcmp(tmp.data(), enc_poly256_vec_xs.data() + offset, 32 * POLY_VEC_LEN) == 0 );
    }
}

TEST_CASE( "poly256 eq", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly256_vec_xs.size(); offset += 32 * POLY_VEC_LEN) {
        poly256_vec a = poly256_load(enc_poly256_vec_xs.data() + offset);
        poly256_vec b = poly256_load(enc_poly256_vec_ys.data() + offset);
        REQUIRE_POLY256VEC_EQ( a, a );
        REQUIRE_POLY256VEC_EQ( b, b );
        REQUIRE_POLY256VEC_NEQ( a, b );
        REQUIRE_POLY256VEC_NEQ( b, a );
    }
}

TEST_CASE( "poly256 add", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly256_vec_xs.size(); offset += 32 * POLY_VEC_LEN) {
        poly256_vec a = poly256_load(enc_poly256_vec_xs.data() + offset);
        poly256_vec b = poly256_load(enc_poly256_vec_ys.data() + offset);
        poly256_vec sum = poly256_load(enc_poly256_vec_sums.data() + offset);
        REQUIRE_POLY256VEC_EQ( poly256_add(a, b), sum );
        REQUIRE_POLY256VEC_EQ( poly256_add(b, a), sum );
    }
}

TEST_CASE( "poly256 mul", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly256_vec_xs.size(); offset += 32 * POLY_VEC_LEN) {
        poly256_vec a = poly256_load(enc_poly256_vec_xs.data() + offset);
        poly256_vec b = poly256_load(enc_poly256_vec_ys.data() + offset);
        poly512_vec unreduced_product = poly512_load(enc_poly256_vec_unreduced_products.data() + 2 * offset);
        REQUIRE_POLY512VEC_EQ( poly256_mul(a, b), unreduced_product );
        REQUIRE_POLY512VEC_EQ( poly256_mul(b, a), unreduced_product );
    }
}

TEST_CASE( "poly256 mul/reduce", "[polynomial]" ) {
    for (size_t offset = 0; offset < enc_poly256_vec_xs.size(); offset += 32 * POLY_VEC_LEN) {
        poly256_vec a = poly256_load(enc_poly256_vec_xs.data() + offset);
        poly256_vec b = poly256_load(enc_poly256_vec_ys.data() + offset);
        poly256_vec product = poly256_load(enc_poly256_vec_products.data() + offset);
        REQUIRE_POLY256VEC_EQ( poly512_reduce256(poly256_mul(a, b)), product );
        REQUIRE_POLY256VEC_EQ( poly512_reduce256(poly256_mul(b, a)), product );
    }
}
